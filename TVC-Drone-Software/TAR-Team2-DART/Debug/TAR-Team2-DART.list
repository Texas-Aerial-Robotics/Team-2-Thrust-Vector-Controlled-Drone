
TAR-Team2-DART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080042d0  080042d0  000052d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080042e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  24000010  080042f8  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000084  080042f8  00006084  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b76f  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018bf  00000000  00000000  000117ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009e0  00000000  00000000  00013070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000788  00000000  00000000  00013a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034a10  00000000  00000000  000141d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cffb  00000000  00000000  00048be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014f6df  00000000  00000000  00055be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a52c2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002834  00000000  00000000  001a5308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  001a7b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080042b8 	.word	0x080042b8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080042b8 	.word	0x080042b8

080002d8 <MX_I2C1_Init>:
    int16_t Gyro_Y;
    int16_t Gyro_Z;
} MPU6050_Data;


void MX_I2C1_Init(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  	//MPU6050 initialization
	hi2c1.Instance = I2C1;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_I2C1_Init+0x44>)
 80002de:	4a10      	ldr	r2, [pc, #64]	@ (8000320 <MX_I2C1_Init+0x48>)
 80002e0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_I2C1_Init+0x44>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_I2C1_Init+0x44>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <MX_I2C1_Init+0x44>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_I2C1_Init+0x44>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <MX_I2C1_Init+0x44>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_I2C1_Init+0x44>)
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	@ (800031c <MX_I2C1_Init+0x44>)
 8000308:	f000 feec 	bl	80010e4 <HAL_I2C_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_I2C1_Init+0x3e>
	{
		Error_Handler();
 8000312:	f000 f993 	bl	800063c <Error_Handler>
	}
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	2400002c 	.word	0x2400002c
 8000320:	40005400 	.word	0x40005400

08000324 <MPU6050_Write>:

// Function to write to MPU6050 register
void MPU6050_Write(uint8_t reg, uint8_t data)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af04      	add	r7, sp, #16
 800032a:	4603      	mov	r3, r0
 800032c:	460a      	mov	r2, r1
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	4613      	mov	r3, r2
 8000332:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg, 1, &data, 1, HAL_MAX_DELAY);
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f04f 33ff 	mov.w	r3, #4294967295
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	2301      	movs	r3, #1
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2301      	movs	r3, #1
 8000348:	2168      	movs	r1, #104	@ 0x68
 800034a:	4803      	ldr	r0, [pc, #12]	@ (8000358 <MPU6050_Write+0x34>)
 800034c:	f000 ff66 	bl	800121c <HAL_I2C_Mem_Write>
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2400002c 	.word	0x2400002c

0800035c <MPU6050_Read>:

// Function to read from MPU6050 register
void MPU6050_Read(uint8_t reg, uint8_t *buffer, uint16_t size)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af04      	add	r7, sp, #16
 8000362:	4603      	mov	r3, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	71fb      	strb	r3, [r7, #7]
 8000368:	4613      	mov	r3, r2
 800036a:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg, 1, buffer, size, HAL_MAX_DELAY);
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	b29a      	uxth	r2, r3
 8000370:	f04f 33ff 	mov.w	r3, #4294967295
 8000374:	9302      	str	r3, [sp, #8]
 8000376:	88bb      	ldrh	r3, [r7, #4]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2301      	movs	r3, #1
 8000380:	2168      	movs	r1, #104	@ 0x68
 8000382:	4803      	ldr	r0, [pc, #12]	@ (8000390 <MPU6050_Read+0x34>)
 8000384:	f001 f85e 	bl	8001444 <HAL_I2C_Mem_Read>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2400002c 	.word	0x2400002c

08000394 <MPU6050_Init>:

void MPU6050_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    // Wake up the MPU6050
    MPU6050_Write(0x6B, 0x00);  // Write 0 to PWR_MGMT_1 to wake up the MPU6050
 8000398:	2100      	movs	r1, #0
 800039a:	206b      	movs	r0, #107	@ 0x6b
 800039c:	f7ff ffc2 	bl	8000324 <MPU6050_Write>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MPU6050_Read_All>:

void MPU6050_Read_All(MPU6050_Data *data)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
    uint8_t buffer[14];
    MPU6050_Read(0x3B, buffer, 14);  // Read 14 bytes starting from ACCEL_XOUT_H
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	220e      	movs	r2, #14
 80003b2:	4619      	mov	r1, r3
 80003b4:	203b      	movs	r0, #59	@ 0x3b
 80003b6:	f7ff ffd1 	bl	800035c <MPU6050_Read>

    // Accelerometer values
    data->Accel_X = (int16_t)(buffer[0] << 8 | buffer[1]);
 80003ba:	7a3b      	ldrb	r3, [r7, #8]
 80003bc:	021b      	lsls	r3, r3, #8
 80003be:	b21a      	sxth	r2, r3
 80003c0:	7a7b      	ldrb	r3, [r7, #9]
 80003c2:	b21b      	sxth	r3, r3
 80003c4:	4313      	orrs	r3, r2
 80003c6:	b21a      	sxth	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	801a      	strh	r2, [r3, #0]
    data->Accel_Y = (int16_t)(buffer[2] << 8 | buffer[3]);
 80003cc:	7abb      	ldrb	r3, [r7, #10]
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	b21a      	sxth	r2, r3
 80003d2:	7afb      	ldrb	r3, [r7, #11]
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b21a      	sxth	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	805a      	strh	r2, [r3, #2]
    data->Accel_Z = (int16_t)(buffer[4] << 8 | buffer[5]);
 80003de:	7b3b      	ldrb	r3, [r7, #12]
 80003e0:	021b      	lsls	r3, r3, #8
 80003e2:	b21a      	sxth	r2, r3
 80003e4:	7b7b      	ldrb	r3, [r7, #13]
 80003e6:	b21b      	sxth	r3, r3
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b21a      	sxth	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	809a      	strh	r2, [r3, #4]

    // Gyroscope values
    data->Gyro_X = (int16_t)(buffer[8] << 8 | buffer[9]);
 80003f0:	7c3b      	ldrb	r3, [r7, #16]
 80003f2:	021b      	lsls	r3, r3, #8
 80003f4:	b21a      	sxth	r2, r3
 80003f6:	7c7b      	ldrb	r3, [r7, #17]
 80003f8:	b21b      	sxth	r3, r3
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b21a      	sxth	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	80da      	strh	r2, [r3, #6]
    data->Gyro_Y = (int16_t)(buffer[10] << 8 | buffer[11]);
 8000402:	7cbb      	ldrb	r3, [r7, #18]
 8000404:	021b      	lsls	r3, r3, #8
 8000406:	b21a      	sxth	r2, r3
 8000408:	7cfb      	ldrb	r3, [r7, #19]
 800040a:	b21b      	sxth	r3, r3
 800040c:	4313      	orrs	r3, r2
 800040e:	b21a      	sxth	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	811a      	strh	r2, [r3, #8]
    data->Gyro_Z = (int16_t)(buffer[12] << 8 | buffer[13]);
 8000414:	7d3b      	ldrb	r3, [r7, #20]
 8000416:	021b      	lsls	r3, r3, #8
 8000418:	b21a      	sxth	r2, r3
 800041a:	7d7b      	ldrb	r3, [r7, #21]
 800041c:	b21b      	sxth	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b21a      	sxth	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	815a      	strh	r2, [r3, #10]
}
 8000426:	bf00      	nop
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <main>:


int main(void)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b084      	sub	sp, #16
 8000432:	af00      	add	r7, sp, #0
  MPU_Config();
 8000434:	f000 f8d6 	bl	80005e4 <MPU_Config>
  HAL_Init();
 8000438:	f000 fa6c 	bl	8000914 <HAL_Init>
  SystemClock_Config();
 800043c:	f000 f810 	bl	8000460 <SystemClock_Config>
  MX_GPIO_Init();
 8000440:	f000 f878 	bl	8000534 <MX_GPIO_Init>

  MPU6050_Init();
 8000444:	f7ff ffa6 	bl	8000394 <MPU6050_Init>
  MPU6050_Data sensor_data;

  MX_I2C1_Init();	//initialize I2C1 connection
 8000448:	f7ff ff46 	bl	80002d8 <MX_I2C1_Init>
	  //LED TEST: toggle pin PA5
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  //HAL_Delay(100);

	  // Read accelerometer and gyroscope data
	  MPU6050_Read_All(&sensor_data);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ffa8 	bl	80003a4 <MPU6050_Read_All>

	  HAL_Delay(500);
 8000454:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000458:	f000 faee 	bl	8000a38 <HAL_Delay>
	  MPU6050_Read_All(&sensor_data);
 800045c:	bf00      	nop
 800045e:	e7f5      	b.n	800044c <main+0x1e>

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b09c      	sub	sp, #112	@ 0x70
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800046a:	224c      	movs	r2, #76	@ 0x4c
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fef6 	bl	8004260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2220      	movs	r2, #32
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f003 fef0 	bl	8004260 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000480:	2002      	movs	r0, #2
 8000482:	f001 fbbb 	bl	8001bfc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000486:	2300      	movs	r3, #0
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	4b28      	ldr	r3, [pc, #160]	@ (800052c <SystemClock_Config+0xcc>)
 800048c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800048e:	4a27      	ldr	r2, [pc, #156]	@ (800052c <SystemClock_Config+0xcc>)
 8000490:	f023 0301 	bic.w	r3, r3, #1
 8000494:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000496:	4b25      	ldr	r3, [pc, #148]	@ (800052c <SystemClock_Config+0xcc>)
 8000498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	4b23      	ldr	r3, [pc, #140]	@ (8000530 <SystemClock_Config+0xd0>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004a8:	4a21      	ldr	r2, [pc, #132]	@ (8000530 <SystemClock_Config+0xd0>)
 80004aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000530 <SystemClock_Config+0xd0>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004bc:	bf00      	nop
 80004be:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <SystemClock_Config+0xd0>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004ca:	d1f8      	bne.n	80004be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004cc:	2302      	movs	r3, #2
 80004ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d4:	2340      	movs	r3, #64	@ 0x40
 80004d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d8:	2300      	movs	r3, #0
 80004da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fbc5 	bl	8001c70 <HAL_RCC_OscConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004ec:	f000 f8a6 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	233f      	movs	r3, #63	@ 0x3f
 80004f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f002 f805 	bl	8002524 <HAL_RCC_ClockConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000520:	f000 f88c 	bl	800063c <Error_Handler>
  }
}
 8000524:	bf00      	nop
 8000526:	3770      	adds	r7, #112	@ 0x70
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	58000400 	.word	0x58000400
 8000530:	58024800 	.word	0x58024800

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <MX_GPIO_Init+0xa4>)
 800054c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <MX_GPIO_Init+0xa4>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800055a:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <MX_GPIO_Init+0xa4>)
 800055c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_GPIO_Init+0xa4>)
 800056a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056e:	4a1a      	ldr	r2, [pc, #104]	@ (80005d8 <MX_GPIO_Init+0xa4>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_GPIO_Init+0xa4>)
 800057a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	4814      	ldr	r0, [pc, #80]	@ (80005dc <MX_GPIO_Init+0xa8>)
 800058c:	f000 fd90 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000590:	2320      	movs	r3, #32
 8000592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	480d      	ldr	r0, [pc, #52]	@ (80005dc <MX_GPIO_Init+0xa8>)
 80005a8:	f000 fbd2 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b2:	2312      	movs	r3, #18
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005be:	2304      	movs	r3, #4
 80005c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <MX_GPIO_Init+0xac>)
 80005ca:	f000 fbc1 	bl	8000d50 <HAL_GPIO_Init>
}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	58024400 	.word	0x58024400
 80005dc:	58020000 	.word	0x58020000
 80005e0:	58020400 	.word	0x58020400

080005e4 <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005f6:	f000 fb33 	bl	8000c60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005fa:	2301      	movs	r3, #1
 80005fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005fe:	2300      	movs	r3, #0
 8000600:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000606:	231f      	movs	r3, #31
 8000608:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800060a:	2387      	movs	r3, #135	@ 0x87
 800060c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800060e:	2300      	movs	r3, #0
 8000610:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000612:	2300      	movs	r3, #0
 8000614:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000616:	2301      	movs	r3, #1
 8000618:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800061a:	2301      	movs	r3, #1
 800061c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fb51 	bl	8000cd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800062e:	2004      	movs	r0, #4
 8000630:	f000 fb2e 	bl	8000c90 <HAL_MPU_Enable>

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <Error_Handler+0x8>

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <HAL_MspInit+0x30>)
 8000650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000654:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <HAL_MspInit+0x30>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_MspInit+0x30>)
 8000660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000664:	f003 0302 	and.w	r3, r3, #2
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	58024400 	.word	0x58024400

0800067c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0ba      	sub	sp, #232	@ 0xe8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	22c0      	movs	r2, #192	@ 0xc0
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fddf 	bl	8004260 <memset>
  if(hi2c->Instance==I2C1)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a27      	ldr	r2, [pc, #156]	@ (8000744 <HAL_I2C_MspInit+0xc8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d146      	bne.n	800073a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006ac:	f04f 0208 	mov.w	r2, #8
 80006b0:	f04f 0300 	mov.w	r3, #0
 80006b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fa5e 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80006ce:	f7ff ffb5 	bl	800063c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <HAL_I2C_MspInit+0xcc>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <HAL_I2C_MspInit+0xcc>)
 80006da:	f043 0302 	orr.w	r3, r3, #2
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <HAL_I2C_MspInit+0xcc>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f8:	2312      	movs	r3, #18
 80006fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800070a:	2304      	movs	r3, #4
 800070c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000714:	4619      	mov	r1, r3
 8000716:	480d      	ldr	r0, [pc, #52]	@ (800074c <HAL_I2C_MspInit+0xd0>)
 8000718:	f000 fb1a 	bl	8000d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <HAL_I2C_MspInit+0xcc>)
 800071e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000722:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <HAL_I2C_MspInit+0xcc>)
 8000724:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000728:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <HAL_I2C_MspInit+0xcc>)
 800072e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800073a:	bf00      	nop
 800073c:	37e8      	adds	r7, #232	@ 0xe8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40005400 	.word	0x40005400
 8000748:	58024400 	.word	0x58024400
 800074c:	58020400 	.word	0x58020400

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <NMI_Handler+0x4>

08000758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <MemManage_Handler+0x4>

08000768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <BusFault_Handler+0x4>

08000770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <UsageFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f927 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b4:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <SystemInit+0xe4>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ba:	4a36      	ldr	r2, [pc, #216]	@ (8000894 <SystemInit+0xe4>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007c4:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <SystemInit+0xe8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f003 030f 	and.w	r3, r3, #15
 80007cc:	2b06      	cmp	r3, #6
 80007ce:	d807      	bhi.n	80007e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007d0:	4b31      	ldr	r3, [pc, #196]	@ (8000898 <SystemInit+0xe8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f023 030f 	bic.w	r3, r3, #15
 80007d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <SystemInit+0xe8>)
 80007da:	f043 0307 	orr.w	r3, r3, #7
 80007de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	@ (800089c <SystemInit+0xec>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a2d      	ldr	r2, [pc, #180]	@ (800089c <SystemInit+0xec>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007ec:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <SystemInit+0xec>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <SystemInit+0xec>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	4929      	ldr	r1, [pc, #164]	@ (800089c <SystemInit+0xec>)
 80007f8:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <SystemInit+0xf0>)
 80007fa:	4013      	ands	r3, r2
 80007fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <SystemInit+0xe8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800080a:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <SystemInit+0xe8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f023 030f 	bic.w	r3, r3, #15
 8000812:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <SystemInit+0xe8>)
 8000814:	f043 0307 	orr.w	r3, r3, #7
 8000818:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800081a:	4b20      	ldr	r3, [pc, #128]	@ (800089c <SystemInit+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <SystemInit+0xec>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000826:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <SystemInit+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <SystemInit+0xec>)
 800082e:	4a1d      	ldr	r2, [pc, #116]	@ (80008a4 <SystemInit+0xf4>)
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <SystemInit+0xec>)
 8000834:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <SystemInit+0xf8>)
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <SystemInit+0xec>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <SystemInit+0xfc>)
 800083c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <SystemInit+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <SystemInit+0xec>)
 8000846:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <SystemInit+0xfc>)
 8000848:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <SystemInit+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <SystemInit+0xec>)
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <SystemInit+0xfc>)
 8000854:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <SystemInit+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <SystemInit+0xec>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <SystemInit+0xec>)
 8000862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000866:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <SystemInit+0xec>)
 800086a:	2200      	movs	r2, #0
 800086c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <SystemInit+0x100>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <SystemInit+0x104>)
 8000874:	4013      	ands	r3, r2
 8000876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800087a:	d202      	bcs.n	8000882 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <SystemInit+0x108>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <SystemInit+0x10c>)
 8000884:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000888:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	52002000 	.word	0x52002000
 800089c:	58024400 	.word	0x58024400
 80008a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a4:	02020200 	.word	0x02020200
 80008a8:	01ff0000 	.word	0x01ff0000
 80008ac:	01010280 	.word	0x01010280
 80008b0:	5c001000 	.word	0x5c001000
 80008b4:	ffff0000 	.word	0xffff0000
 80008b8:	51008108 	.word	0x51008108
 80008bc:	52004000 	.word	0x52004000

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c4:	f7ff ff74 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopFillZerobss+0x22>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f003 fcbf 	bl	8004270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fd9c 	bl	800042e <main>
  bx  lr
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000900:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000904:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 8000908:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800090c:	24000084 	.word	0x24000084

08000910 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC3_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f96e 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000920:	f001 ffb6 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8000924:	4602      	mov	r2, r0
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_Init+0x68>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	f003 030f 	and.w	r3, r3, #15
 8000930:	4913      	ldr	r1, [pc, #76]	@ (8000980 <HAL_Init+0x6c>)
 8000932:	5ccb      	ldrb	r3, [r1, r3]
 8000934:	f003 031f 	and.w	r3, r3, #31
 8000938:	fa22 f303 	lsr.w	r3, r2, r3
 800093c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_Init+0x68>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <HAL_Init+0x6c>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	f003 031f 	and.w	r3, r3, #31
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	4a0b      	ldr	r2, [pc, #44]	@ (8000984 <HAL_Init+0x70>)
 8000956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000958:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <HAL_Init+0x74>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f814 	bl	800098c <HAL_InitTick>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e002      	b.n	8000974 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800096e:	f7ff fe6b 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58024400 	.word	0x58024400
 8000980:	080042d0 	.word	0x080042d0
 8000984:	24000004 	.word	0x24000004
 8000988:	24000000 	.word	0x24000000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <HAL_InitTick+0x60>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e021      	b.n	80009e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <HAL_InitTick+0x64>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <HAL_InitTick+0x60>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f945 	bl	8000c46 <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f91d 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <HAL_InitTick+0x68>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2400000c 	.word	0x2400000c
 80009f0:	24000000 	.word	0x24000000
 80009f4:	24000008 	.word	0x24000008

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2400000c 	.word	0x2400000c
 8000a1c:	24000080 	.word	0x24000080

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	24000080 	.word	0x24000080

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff ffee 	bl	8000a20 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffde 	bl	8000a20 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2400000c 	.word	0x2400000c

08000a80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <HAL_GetREVID+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	0c1b      	lsrs	r3, r3, #16
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	5c001000 	.word	0x5c001000

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	05fa0000 	.word	0x05fa0000

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	@ (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	@ 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	@ 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff8e 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff47 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff5e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff90 	bl	8000b50 <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5f 	bl	8000afc <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffb2 	bl	8000bb8 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c64:	f3bf 8f5f 	dmb	sy
}
 8000c68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <HAL_MPU_Disable+0x28>)
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6e:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_MPU_Disable+0x28>)
 8000c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c74:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_MPU_Disable+0x2c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	e000ed90 	.word	0xe000ed90

08000c90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c98:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <HAL_MPU_Enable+0x38>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_MPU_Enable+0x3c>)
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca6:	4a09      	ldr	r2, [pc, #36]	@ (8000ccc <HAL_MPU_Enable+0x3c>)
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000cae:	f3bf 8f4f 	dsb	sy
}
 8000cb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cb4:	f3bf 8f6f 	isb	sy
}
 8000cb8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed90 	.word	0xe000ed90
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	785a      	ldrb	r2, [r3, #1]
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <HAL_MPU_ConfigRegion+0x7c>)
 8000cde:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_MPU_ConfigRegion+0x7c>)
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <HAL_MPU_ConfigRegion+0x7c>)
 8000ce6:	f023 0301 	bic.w	r3, r3, #1
 8000cea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000cec:	4a17      	ldr	r2, [pc, #92]	@ (8000d4c <HAL_MPU_ConfigRegion+0x7c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7b1b      	ldrb	r3, [r3, #12]
 8000cf8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7adb      	ldrb	r3, [r3, #11]
 8000cfe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7a9b      	ldrb	r3, [r3, #10]
 8000d06:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7b5b      	ldrb	r3, [r3, #13]
 8000d0e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7b9b      	ldrb	r3, [r3, #14]
 8000d16:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7bdb      	ldrb	r3, [r3, #15]
 8000d1e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7a5b      	ldrb	r3, [r3, #9]
 8000d26:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7a1b      	ldrb	r3, [r3, #8]
 8000d2e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d30:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d3a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d3c:	6113      	str	r3, [r2, #16]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed90 	.word	0xe000ed90

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d5e:	4b89      	ldr	r3, [pc, #548]	@ (8000f84 <HAL_GPIO_Init+0x234>)
 8000d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d62:	e194      	b.n	800108e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8186 	beq.w	8001088 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d005      	beq.n	8000d94 <HAL_GPIO_Init+0x44>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d130      	bne.n	8000df6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 0201 	and.w	r2, r3, #1
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d017      	beq.n	8000e32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d123      	bne.n	8000e86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	69b9      	ldr	r1, [r7, #24]
 8000e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0203 	and.w	r2, r3, #3
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 80e0 	beq.w	8001088 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <HAL_GPIO_Init+0x238>)
 8000eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ece:	4a2e      	ldr	r2, [pc, #184]	@ (8000f88 <HAL_GPIO_Init+0x238>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <HAL_GPIO_Init+0x238>)
 8000eda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee6:	4a29      	ldr	r2, [pc, #164]	@ (8000f8c <HAL_GPIO_Init+0x23c>)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a20      	ldr	r2, [pc, #128]	@ (8000f90 <HAL_GPIO_Init+0x240>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d052      	beq.n	8000fb8 <HAL_GPIO_Init+0x268>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <HAL_GPIO_Init+0x244>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d031      	beq.n	8000f7e <HAL_GPIO_Init+0x22e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f98 <HAL_GPIO_Init+0x248>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d02b      	beq.n	8000f7a <HAL_GPIO_Init+0x22a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <HAL_GPIO_Init+0x24c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d025      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <HAL_GPIO_Init+0x250>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01f      	beq.n	8000f72 <HAL_GPIO_Init+0x222>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <HAL_GPIO_Init+0x254>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x21e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa8 <HAL_GPIO_Init+0x258>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x21a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a19      	ldr	r2, [pc, #100]	@ (8000fac <HAL_GPIO_Init+0x25c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x216>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a18      	ldr	r2, [pc, #96]	@ (8000fb0 <HAL_GPIO_Init+0x260>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x212>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <HAL_GPIO_Init+0x264>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x20e>
 8000f5a:	2309      	movs	r3, #9
 8000f5c:	e02d      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f5e:	230a      	movs	r3, #10
 8000f60:	e02b      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f62:	2308      	movs	r3, #8
 8000f64:	e029      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e027      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	e025      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e023      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e021      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e01f      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e01d      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e01b      	b.n	8000fba <HAL_GPIO_Init+0x26a>
 8000f82:	bf00      	nop
 8000f84:	58000080 	.word	0x58000080
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58000400 	.word	0x58000400
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	58021000 	.word	0x58021000
 8000fa4:	58021400 	.word	0x58021400
 8000fa8:	58021800 	.word	0x58021800
 8000fac:	58021c00 	.word	0x58021c00
 8000fb0:	58022000 	.word	0x58022000
 8000fb4:	58022400 	.word	0x58022400
 8000fb8:	2300      	movs	r3, #0
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fca:	4938      	ldr	r1, [pc, #224]	@ (80010ac <HAL_GPIO_Init+0x35c>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ffe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800102c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	f47f ae63 	bne.w	8000d64 <HAL_GPIO_Init+0x14>
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3724      	adds	r7, #36	@ 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	58000400 	.word	0x58000400

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e08b      	b.n	800120e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fab6 	bl	800067c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2224      	movs	r2, #36	@ 0x24
 8001114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001134:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001144:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	e006      	b.n	800116c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800116a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d108      	bne.n	8001186 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	e007      	b.n	8001196 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <HAL_I2C_Init+0x134>)
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69d9      	ldr	r1, [r3, #28]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2220      	movs	r2, #32
 80011fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	02008000 	.word	0x02008000

0800121c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af02      	add	r7, sp, #8
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	4608      	mov	r0, r1
 8001226:	4611      	mov	r1, r2
 8001228:	461a      	mov	r2, r3
 800122a:	4603      	mov	r3, r0
 800122c:	817b      	strh	r3, [r7, #10]
 800122e:	460b      	mov	r3, r1
 8001230:	813b      	strh	r3, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	f040 80f9 	bne.w	8001436 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_I2C_Mem_Write+0x34>
 800124a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001256:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0ed      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_I2C_Mem_Write+0x4e>
 8001266:	2302      	movs	r3, #2
 8001268:	e0e6      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001272:	f7ff fbd5 	bl	8000a20 <HAL_GetTick>
 8001276:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2319      	movs	r3, #25
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fac3 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d1      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2221      	movs	r2, #33	@ 0x21
 8001298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2240      	movs	r2, #64	@ 0x40
 80012a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a3a      	ldr	r2, [r7, #32]
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012bc:	88f8      	ldrh	r0, [r7, #6]
 80012be:	893a      	ldrh	r2, [r7, #8]
 80012c0:	8979      	ldrh	r1, [r7, #10]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4603      	mov	r3, r0
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 f9d3 	bl	8001678 <I2C_RequestMemoryWrite>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0a9      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2bff      	cmp	r3, #255	@ 0xff
 80012ec:	d90e      	bls.n	800130c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	22ff      	movs	r2, #255	@ 0xff
 80012f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	8979      	ldrh	r1, [r7, #10]
 80012fc:	2300      	movs	r3, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 fc47 	bl	8001b98 <I2C_TransferConfig>
 800130a:	e00f      	b.n	800132c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800131a:	b2da      	uxtb	r2, r3
 800131c:	8979      	ldrh	r1, [r7, #10]
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fc36 	bl	8001b98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 fac6 	bl	80018c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e07b      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800135a:	b29b      	uxth	r3, r3
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d034      	beq.n	80013e4 <HAL_I2C_Mem_Write+0x1c8>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800137e:	2b00      	cmp	r3, #0
 8001380:	d130      	bne.n	80013e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001388:	2200      	movs	r2, #0
 800138a:	2180      	movs	r1, #128	@ 0x80
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 fa3f 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e04d      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2bff      	cmp	r3, #255	@ 0xff
 80013a4:	d90e      	bls.n	80013c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	22ff      	movs	r2, #255	@ 0xff
 80013aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	8979      	ldrh	r1, [r7, #10]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 fbeb 	bl	8001b98 <I2C_TransferConfig>
 80013c2:	e00f      	b.n	80013e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	8979      	ldrh	r1, [r7, #10]
 80013d6:	2300      	movs	r3, #0
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 fbda 	bl	8001b98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d19e      	bne.n	800132c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 faac 	bl	8001950 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e01a      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2220      	movs	r2, #32
 8001408:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_I2C_Mem_Write+0x224>)
 8001416:	400b      	ands	r3, r1
 8001418:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001436:	2302      	movs	r3, #2
  }
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	fe00e800 	.word	0xfe00e800

08001444 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	817b      	strh	r3, [r7, #10]
 8001456:	460b      	mov	r3, r1
 8001458:	813b      	strh	r3, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b20      	cmp	r3, #32
 8001468:	f040 80fd 	bne.w	8001666 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <HAL_I2C_Mem_Read+0x34>
 8001472:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0f1      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_I2C_Mem_Read+0x4e>
 800148e:	2302      	movs	r3, #2
 8001490:	e0ea      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800149a:	f7ff fac1 	bl	8000a20 <HAL_GetTick>
 800149e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2319      	movs	r3, #25
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f9af 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0d5      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2222      	movs	r2, #34	@ 0x22
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2240      	movs	r2, #64	@ 0x40
 80014c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a3a      	ldr	r2, [r7, #32]
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80014dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014e4:	88f8      	ldrh	r0, [r7, #6]
 80014e6:	893a      	ldrh	r2, [r7, #8]
 80014e8:	8979      	ldrh	r1, [r7, #10]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	4603      	mov	r3, r0
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f913 	bl	8001720 <I2C_RequestMemoryRead>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0ad      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001510:	b29b      	uxth	r3, r3
 8001512:	2bff      	cmp	r3, #255	@ 0xff
 8001514:	d90e      	bls.n	8001534 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	22ff      	movs	r2, #255	@ 0xff
 800151a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001520:	b2da      	uxtb	r2, r3
 8001522:	8979      	ldrh	r1, [r7, #10]
 8001524:	4b52      	ldr	r3, [pc, #328]	@ (8001670 <HAL_I2C_Mem_Read+0x22c>)
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 fb33 	bl	8001b98 <I2C_TransferConfig>
 8001532:	e00f      	b.n	8001554 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001542:	b2da      	uxtb	r2, r3
 8001544:	8979      	ldrh	r1, [r7, #10]
 8001546:	4b4a      	ldr	r3, [pc, #296]	@ (8001670 <HAL_I2C_Mem_Read+0x22c>)
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 fb22 	bl	8001b98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155a:	2200      	movs	r2, #0
 800155c:	2104      	movs	r1, #4
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f956 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e07c      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001596:	b29b      	uxth	r3, r3
 8001598:	3b01      	subs	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d034      	beq.n	8001614 <HAL_I2C_Mem_Read+0x1d0>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d130      	bne.n	8001614 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	2200      	movs	r2, #0
 80015ba:	2180      	movs	r1, #128	@ 0x80
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 f927 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e04d      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2bff      	cmp	r3, #255	@ 0xff
 80015d4:	d90e      	bls.n	80015f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	22ff      	movs	r2, #255	@ 0xff
 80015da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	8979      	ldrh	r1, [r7, #10]
 80015e4:	2300      	movs	r3, #0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fad3 	bl	8001b98 <I2C_TransferConfig>
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001602:	b2da      	uxtb	r2, r3
 8001604:	8979      	ldrh	r1, [r7, #10]
 8001606:	2300      	movs	r3, #0
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fac2 	bl	8001b98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d19a      	bne.n	8001554 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 f994 	bl	8001950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e01a      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2220      	movs	r2, #32
 8001638:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_I2C_Mem_Read+0x230>)
 8001646:	400b      	ands	r3, r1
 8001648:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001666:	2302      	movs	r3, #2
  }
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	80002400 	.word	0x80002400
 8001674:	fe00e800 	.word	0xfe00e800

08001678 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4603      	mov	r3, r0
 8001688:	817b      	strh	r3, [r7, #10]
 800168a:	460b      	mov	r3, r1
 800168c:	813b      	strh	r3, [r7, #8]
 800168e:	4613      	mov	r3, r2
 8001690:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	8979      	ldrh	r1, [r7, #10]
 8001698:	4b20      	ldr	r3, [pc, #128]	@ (800171c <I2C_RequestMemoryWrite+0xa4>)
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fa79 	bl	8001b98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f909 	bl	80018c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e02c      	b.n	8001714 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016c0:	893b      	ldrh	r3, [r7, #8]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80016ca:	e015      	b.n	80016f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016cc:	893b      	ldrh	r3, [r7, #8]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	69b9      	ldr	r1, [r7, #24]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f8ef 	bl	80018c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e012      	b.n	8001714 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016ee:	893b      	ldrh	r3, [r7, #8]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2200      	movs	r2, #0
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f884 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	80002000 	.word	0x80002000

08001720 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	817b      	strh	r3, [r7, #10]
 8001732:	460b      	mov	r3, r1
 8001734:	813b      	strh	r3, [r7, #8]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	8979      	ldrh	r1, [r7, #10]
 8001740:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <I2C_RequestMemoryRead+0xa4>)
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fa26 	bl	8001b98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f8b6 	bl	80018c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e02c      	b.n	80017ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001766:	893b      	ldrh	r3, [r7, #8]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001770:	e015      	b.n	800179e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001772:	893b      	ldrh	r3, [r7, #8]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b29b      	uxth	r3, r3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	69b9      	ldr	r1, [r7, #24]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f89c 	bl	80018c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e012      	b.n	80017ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001794:	893b      	ldrh	r3, [r7, #8]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2200      	movs	r2, #0
 80017a6:	2140      	movs	r1, #64	@ 0x40
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f831 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	80002000 	.word	0x80002000

080017c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d103      	bne.n	80017e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d007      	beq.n	8001804 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	619a      	str	r2, [r3, #24]
  }
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001820:	e03b      	b.n	800189a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f8d6 	bl	80019d8 <I2C_IsErrorOccurred>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e041      	b.n	80018ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d02d      	beq.n	800189a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800183e:	f7ff f8ef 	bl	8000a20 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d302      	bcc.n	8001854 <I2C_WaitOnFlagUntilTimeout+0x44>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d122      	bne.n	800189a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	4013      	ands	r3, r2
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	429a      	cmp	r2, r3
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	429a      	cmp	r2, r3
 8001870:	d113      	bne.n	800189a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f043 0220 	orr.w	r2, r3, #32
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2220      	movs	r2, #32
 8001882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4013      	ands	r3, r2
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d0b4      	beq.n	8001822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018ce:	e033      	b.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f87f 	bl	80019d8 <I2C_IsErrorOccurred>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e031      	b.n	8001948 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ea:	d025      	beq.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ec:	f7ff f898 	bl	8000a20 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d302      	bcc.n	8001902 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b02      	cmp	r3, #2
 800190e:	d013      	beq.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e007      	b.n	8001948 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b02      	cmp	r3, #2
 8001944:	d1c4      	bne.n	80018d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800195c:	e02f      	b.n	80019be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f838 	bl	80019d8 <I2C_IsErrorOccurred>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e02d      	b.n	80019ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001972:	f7ff f855 	bl	8000a20 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	d302      	bcc.n	8001988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11a      	bne.n	80019be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b20      	cmp	r3, #32
 8001994:	d013      	beq.n	80019be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2220      	movs	r2, #32
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e007      	b.n	80019ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	2b20      	cmp	r3, #32
 80019ca:	d1c8      	bne.n	800195e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d068      	beq.n	8001ad6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2210      	movs	r2, #16
 8001a0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a0c:	e049      	b.n	8001aa2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d045      	beq.n	8001aa2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a16:	f7ff f803 	bl	8000a20 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d302      	bcc.n	8001a2c <I2C_IsErrorOccurred+0x54>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d13a      	bne.n	8001aa2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a4e:	d121      	bne.n	8001a94 <I2C_IsErrorOccurred+0xbc>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a56:	d01d      	beq.n	8001a94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001a58:	7cfb      	ldrb	r3, [r7, #19]
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d01a      	beq.n	8001a94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a6e:	f7fe ffd7 	bl	8000a20 <HAL_GetTick>
 8001a72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a74:	e00e      	b.n	8001a94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a76:	f7fe ffd3 	bl	8000a20 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b19      	cmp	r3, #25
 8001a82:	d907      	bls.n	8001a94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	f043 0320 	orr.w	r3, r3, #32
 8001a8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001a92:	e006      	b.n	8001aa2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d1e9      	bne.n	8001a76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d003      	beq.n	8001ab8 <I2C_IsErrorOccurred+0xe0>
 8001ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0aa      	beq.n	8001a0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001b44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01c      	beq.n	8001b86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff fe3b 	bl	80017c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <I2C_IsErrorOccurred+0x1bc>)
 8001b5e:	400b      	ands	r3, r1
 8001b60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	fe00e800 	.word	0xfe00e800

08001b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	817b      	strh	r3, [r7, #10]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bb0:	7a7b      	ldrb	r3, [r7, #9]
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	0d5b      	lsrs	r3, r3, #21
 8001bd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <I2C_TransferConfig+0x60>)
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	ea02 0103 	and.w	r1, r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	03ff63ff 	.word	0x03ff63ff

08001bfc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_PWREx_ConfigSupply+0x70>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00a      	beq.n	8001c26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_PWREx_ConfigSupply+0x70>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d001      	beq.n	8001c22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e01f      	b.n	8001c62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e01d      	b.n	8001c62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_PWREx_ConfigSupply+0x70>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f023 0207 	bic.w	r2, r3, #7
 8001c2e:	490f      	ldr	r1, [pc, #60]	@ (8001c6c <HAL_PWREx_ConfigSupply+0x70>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c36:	f7fe fef3 	bl	8000a20 <HAL_GetTick>
 8001c3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c3c:	e009      	b.n	8001c52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c3e:	f7fe feef 	bl	8000a20 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c4c:	d901      	bls.n	8001c52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e007      	b.n	8001c62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_PWREx_ConfigSupply+0x70>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58024800 	.word	0x58024800

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	@ 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 bc48 	b.w	8002514 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 8088 	beq.w	8001da2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	4b99      	ldr	r3, [pc, #612]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d007      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x48>
 8001ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001caa:	2b18      	cmp	r3, #24
 8001cac:	d111      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62>
 8001cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d06d      	beq.n	8001da0 <HAL_RCC_OscConfig+0x130>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d169      	bne.n	8001da0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f000 bc21 	b.w	8002514 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x7a>
 8001cdc:	4b86      	ldr	r3, [pc, #536]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a85      	ldr	r2, [pc, #532]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e02e      	b.n	8001d48 <HAL_RCC_OscConfig+0xd8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x9c>
 8001cf2:	4b81      	ldr	r3, [pc, #516]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a80      	ldr	r2, [pc, #512]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a7d      	ldr	r2, [pc, #500]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xd8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0xc0>
 8001d16:	4b78      	ldr	r3, [pc, #480]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a77      	ldr	r2, [pc, #476]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a74      	ldr	r2, [pc, #464]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xd8>
 8001d30:	4b71      	ldr	r3, [pc, #452]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a70      	ldr	r2, [pc, #448]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6d      	ldr	r2, [pc, #436]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe fe66 	bl	8000a20 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe fe62 	bl	8000a20 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e3d4      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe8>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe52 	bl	8000a20 <HAL_GetTick>
 8001d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7fe fe4e 	bl	8000a20 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	@ 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e3c0      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d92:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x110>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80ca 	beq.w	8001f44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db0:	4b51      	ldr	r3, [pc, #324]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001db8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x166>
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	2b18      	cmp	r3, #24
 8001dca:	d156      	bne.n	8001e7a <HAL_RCC_OscConfig+0x20a>
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d151      	bne.n	8001e7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd6:	4b48      	ldr	r3, [pc, #288]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x17e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e392      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dee:	4b42      	ldr	r3, [pc, #264]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0219 	bic.w	r2, r3, #25
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	493f      	ldr	r1, [pc, #252]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe fe0e 	bl	8000a20 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7fe fe0a 	bl	8000a20 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e37c      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	f7fe fe2b 	bl	8000a80 <HAL_GetREVID>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d817      	bhi.n	8001e64 <HAL_RCC_OscConfig+0x1f4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b40      	cmp	r3, #64	@ 0x40
 8001e3a:	d108      	bne.n	8001e4e <HAL_RCC_OscConfig+0x1de>
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e44:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e4c:	e07a      	b.n	8001f44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	031b      	lsls	r3, r3, #12
 8001e5c:	4926      	ldr	r1, [pc, #152]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e62:	e06f      	b.n	8001f44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	4921      	ldr	r1, [pc, #132]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	e064      	b.n	8001f44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d047      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0219 	bic.w	r2, r3, #25
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	491a      	ldr	r1, [pc, #104]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7fe fdc4 	bl	8000a20 <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fdc0 	bl	8000a20 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e332      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	f7fe fde1 	bl	8000a80 <HAL_GetREVID>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d819      	bhi.n	8001efc <HAL_RCC_OscConfig+0x28c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b40      	cmp	r3, #64	@ 0x40
 8001ece:	d108      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x272>
 8001ed0:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ed8:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ede:	6053      	str	r3, [r2, #4]
 8001ee0:	e030      	b.n	8001f44 <HAL_RCC_OscConfig+0x2d4>
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	031b      	lsls	r3, r3, #12
 8001ef0:	4901      	ldr	r1, [pc, #4]	@ (8001ef8 <HAL_RCC_OscConfig+0x288>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
 8001ef6:	e025      	b.n	8001f44 <HAL_RCC_OscConfig+0x2d4>
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	4b9a      	ldr	r3, [pc, #616]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	4997      	ldr	r1, [pc, #604]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	e018      	b.n	8001f44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b95      	ldr	r3, [pc, #596]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a94      	ldr	r2, [pc, #592]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fd7f 	bl	8000a20 <HAL_GetTick>
 8001f22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7fe fd7b 	bl	8000a20 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e2ed      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f38:	4b8b      	ldr	r3, [pc, #556]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a9 	beq.w	80020a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	4b85      	ldr	r3, [pc, #532]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f5c:	4b82      	ldr	r3, [pc, #520]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d007      	beq.n	8001f78 <HAL_RCC_OscConfig+0x308>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b18      	cmp	r3, #24
 8001f6c:	d13a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x374>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d135      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f78:	4b7b      	ldr	r3, [pc, #492]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x320>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	2b80      	cmp	r3, #128	@ 0x80
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e2c1      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f90:	f7fe fd76 	bl	8000a80 <HAL_GetREVID>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d817      	bhi.n	8001fce <HAL_RCC_OscConfig+0x35e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x348>
 8001fa6:	4b70      	ldr	r3, [pc, #448]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001fae:	4a6e      	ldr	r2, [pc, #440]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001fb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fb6:	e075      	b.n	80020a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	069b      	lsls	r3, r3, #26
 8001fc6:	4968      	ldr	r1, [pc, #416]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fcc:	e06a      	b.n	80020a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fce:	4b66      	ldr	r3, [pc, #408]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	061b      	lsls	r3, r3, #24
 8001fdc:	4962      	ldr	r1, [pc, #392]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fe2:	e05f      	b.n	80020a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d042      	beq.n	8002072 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fec:	4b5e      	ldr	r3, [pc, #376]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fd12 	bl	8000a20 <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002000:	f7fe fd0e 	bl	8000a20 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e280      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002012:	4b55      	ldr	r3, [pc, #340]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800201e:	f7fe fd2f 	bl	8000a80 <HAL_GetREVID>
 8002022:	4603      	mov	r3, r0
 8002024:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002028:	4293      	cmp	r3, r2
 800202a:	d817      	bhi.n	800205c <HAL_RCC_OscConfig+0x3ec>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	2b20      	cmp	r3, #32
 8002032:	d108      	bne.n	8002046 <HAL_RCC_OscConfig+0x3d6>
 8002034:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800203c:	4a4a      	ldr	r2, [pc, #296]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 800203e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002042:	6053      	str	r3, [r2, #4]
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0x434>
 8002046:	4b48      	ldr	r3, [pc, #288]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	069b      	lsls	r3, r3, #26
 8002054:	4944      	ldr	r1, [pc, #272]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
 800205a:	e023      	b.n	80020a4 <HAL_RCC_OscConfig+0x434>
 800205c:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	493f      	ldr	r1, [pc, #252]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
 8002070:	e018      	b.n	80020a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002072:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a3c      	ldr	r2, [pc, #240]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800207c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fccf 	bl	8000a20 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002086:	f7fe fccb 	bl	8000a20 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e23d      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002098:	4b33      	ldr	r3, [pc, #204]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d036      	beq.n	800211e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d019      	beq.n	80020ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 80020ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7fe fcac 	bl	8000a20 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7fe fca8 	bl	8000a20 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e21a      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x45c>
 80020ea:	e018      	b.n	800211e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe fc92 	bl	8000a20 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7fe fc8e 	bl	8000a20 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e200      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d039      	beq.n	800219e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01c      	beq.n	800216c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002132:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 8002138:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800213c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800213e:	f7fe fc6f 	bl	8000a20 <HAL_GetTick>
 8002142:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002146:	f7fe fc6b 	bl	8000a20 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e1dd      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x4d6>
 8002164:	e01b      	b.n	800219e <HAL_RCC_OscConfig+0x52e>
 8002166:	bf00      	nop
 8002168:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800216c:	4b9b      	ldr	r3, [pc, #620]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9a      	ldr	r2, [pc, #616]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002176:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002178:	f7fe fc52 	bl	8000a20 <HAL_GetTick>
 800217c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002180:	f7fe fc4e 	bl	8000a20 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e1c0      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002192:	4b92      	ldr	r3, [pc, #584]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8081 	beq.w	80022ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021ac:	4b8c      	ldr	r3, [pc, #560]	@ (80023e0 <HAL_RCC_OscConfig+0x770>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a8b      	ldr	r2, [pc, #556]	@ (80023e0 <HAL_RCC_OscConfig+0x770>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b8:	f7fe fc32 	bl	8000a20 <HAL_GetTick>
 80021bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7fe fc2e 	bl	8000a20 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1a0      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d2:	4b83      	ldr	r3, [pc, #524]	@ (80023e0 <HAL_RCC_OscConfig+0x770>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_OscConfig+0x584>
 80021e6:	4b7d      	ldr	r3, [pc, #500]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ea:	4a7c      	ldr	r2, [pc, #496]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f2:	e02d      	b.n	8002250 <HAL_RCC_OscConfig+0x5e0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10c      	bne.n	8002216 <HAL_RCC_OscConfig+0x5a6>
 80021fc:	4b77      	ldr	r3, [pc, #476]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002200:	4a76      	ldr	r2, [pc, #472]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	@ 0x70
 8002208:	4b74      	ldr	r3, [pc, #464]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	4a73      	ldr	r2, [pc, #460]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800220e:	f023 0304 	bic.w	r3, r3, #4
 8002212:	6713      	str	r3, [r2, #112]	@ 0x70
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x5e0>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c8>
 800221e:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	4a6e      	ldr	r2, [pc, #440]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	@ 0x70
 800222a:	4b6c      	ldr	r3, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222e:	4a6b      	ldr	r2, [pc, #428]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	@ 0x70
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0x5e0>
 8002238:	4b68      	ldr	r3, [pc, #416]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	4a67      	ldr	r2, [pc, #412]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6713      	str	r3, [r2, #112]	@ 0x70
 8002244:	4b65      	ldr	r3, [pc, #404]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002248:	4a64      	ldr	r2, [pc, #400]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800224a:	f023 0304 	bic.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe fbe2 	bl	8000a20 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe fbde 	bl	8000a20 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e14e      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002276:	4b59      	ldr	r3, [pc, #356]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ee      	beq.n	8002260 <HAL_RCC_OscConfig+0x5f0>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fbcc 	bl	8000a20 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fbc8 	bl	8000a20 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e138      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022a2:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ee      	bne.n	800228c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 812d 	beq.w	8002512 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022b8:	4b48      	ldr	r3, [pc, #288]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022c0:	2b18      	cmp	r3, #24
 80022c2:	f000 80bd 	beq.w	8002440 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	f040 809e 	bne.w	800240c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	4b42      	ldr	r3, [pc, #264]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a41      	ldr	r2, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80022d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fba0 	bl	8000a20 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe fb9c 	bl	8000a20 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e10e      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022f6:	4b39      	ldr	r3, [pc, #228]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002302:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002304:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002306:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <HAL_RCC_OscConfig+0x774>)
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	430a      	orrs	r2, r1
 8002316:	4931      	ldr	r1, [pc, #196]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	628b      	str	r3, [r1, #40]	@ 0x28
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	3b01      	subs	r3, #1
 8002322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232a:	3b01      	subs	r3, #1
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	b29b      	uxth	r3, r3
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002336:	3b01      	subs	r3, #1
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	3b01      	subs	r3, #1
 8002346:	061b      	lsls	r3, r3, #24
 8002348:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800234c:	4923      	ldr	r1, [pc, #140]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002352:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800235e:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <HAL_RCC_OscConfig+0x778>)
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800236a:	00d2      	lsls	r2, r2, #3
 800236c:	491b      	ldr	r1, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800236e:	4313      	orrs	r3, r2
 8002370:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002376:	f023 020c 	bic.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	4917      	ldr	r1, [pc, #92]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	f023 0202 	bic.w	r2, r3, #2
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	4912      	ldr	r1, [pc, #72]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	4a10      	ldr	r2, [pc, #64]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a2:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <HAL_RCC_OscConfig+0x76c>)
 80023cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fb25 	bl	8000a20 <HAL_GetTick>
 80023d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023d8:	e011      	b.n	80023fe <HAL_RCC_OscConfig+0x78e>
 80023da:	bf00      	nop
 80023dc:	58024400 	.word	0x58024400
 80023e0:	58024800 	.word	0x58024800
 80023e4:	fffffc0c 	.word	0xfffffc0c
 80023e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7fe fb18 	bl	8000a20 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e08a      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023fe:	4b47      	ldr	r3, [pc, #284]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x77c>
 800240a:	e082      	b.n	8002512 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b43      	ldr	r3, [pc, #268]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a42      	ldr	r2, [pc, #264]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 8002412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fb02 	bl	8000a20 <HAL_GetTick>
 800241c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe fafe 	bl	8000a20 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e070      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002432:	4b3a      	ldr	r3, [pc, #232]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x7b0>
 800243e:	e068      	b.n	8002512 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002440:	4b36      	ldr	r3, [pc, #216]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002446:	4b35      	ldr	r3, [pc, #212]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	2b01      	cmp	r3, #1
 8002452:	d031      	beq.n	80024b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f003 0203 	and.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d12a      	bne.n	80024b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d122      	bne.n	80024b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d11a      	bne.n	80024b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	0a5b      	lsrs	r3, r3, #9
 8002486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d111      	bne.n	80024b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d108      	bne.n	80024b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0e1b      	lsrs	r3, r3, #24
 80024aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e02b      	b.n	8002514 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 80024be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c0:	08db      	lsrs	r3, r3, #3
 80024c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d01f      	beq.n	8002512 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	4a11      	ldr	r2, [pc, #68]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024de:	f7fe fa9f 	bl	8000a20 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80024e4:	bf00      	nop
 80024e6:	f7fe fa9b 	bl	8000a20 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d0f9      	beq.n	80024e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 80024f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_RCC_OscConfig+0x8b0>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024fe:	00d2      	lsls	r2, r2, #3
 8002500:	4906      	ldr	r1, [pc, #24]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 8002502:	4313      	orrs	r3, r2
 8002504:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	4a04      	ldr	r2, [pc, #16]	@ (800251c <HAL_RCC_OscConfig+0x8ac>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3730      	adds	r7, #48	@ 0x30
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	58024400 	.word	0x58024400
 8002520:	ffff0007 	.word	0xffff0007

08002524 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e19c      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b8a      	ldr	r3, [pc, #552]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d910      	bls.n	8002568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b87      	ldr	r3, [pc, #540]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	4985      	ldr	r1, [pc, #532]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b83      	ldr	r3, [pc, #524]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e184      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	4b7b      	ldr	r3, [pc, #492]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002580:	429a      	cmp	r2, r3
 8002582:	d908      	bls.n	8002596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002584:	4b78      	ldr	r3, [pc, #480]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	4975      	ldr	r1, [pc, #468]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002592:	4313      	orrs	r3, r2
 8002594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	4b70      	ldr	r3, [pc, #448]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d908      	bls.n	80025c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	496a      	ldr	r1, [pc, #424]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	4b64      	ldr	r3, [pc, #400]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025dc:	429a      	cmp	r2, r3
 80025de:	d908      	bls.n	80025f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025e0:	4b61      	ldr	r3, [pc, #388]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	495e      	ldr	r1, [pc, #376]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	4b59      	ldr	r3, [pc, #356]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800260a:	429a      	cmp	r2, r3
 800260c:	d908      	bls.n	8002620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800260e:	4b56      	ldr	r3, [pc, #344]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4953      	ldr	r1, [pc, #332]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 800261c:	4313      	orrs	r3, r2
 800261e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d010      	beq.n	800264e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b4d      	ldr	r3, [pc, #308]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	429a      	cmp	r2, r3
 800263a:	d908      	bls.n	800264e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4b4a      	ldr	r3, [pc, #296]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f023 020f 	bic.w	r2, r3, #15
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4947      	ldr	r1, [pc, #284]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 800264a:	4313      	orrs	r3, r2
 800264c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d055      	beq.n	8002706 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800265a:	4b43      	ldr	r3, [pc, #268]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4940      	ldr	r1, [pc, #256]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002668:	4313      	orrs	r3, r2
 800266a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002674:	4b3c      	ldr	r3, [pc, #240]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0f6      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800268c:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0ea      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026a4:	4b30      	ldr	r3, [pc, #192]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0de      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0d6      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f023 0207 	bic.w	r2, r3, #7
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4925      	ldr	r1, [pc, #148]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d6:	f7fe f9a3 	bl	8000a20 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7fe f99f 	bl	8000a20 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0be      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	429a      	cmp	r2, r3
 8002704:	d1eb      	bne.n	80026de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	429a      	cmp	r2, r3
 8002720:	d208      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f023 020f 	bic.w	r2, r3, #15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	490e      	ldr	r1, [pc, #56]	@ (8002768 <HAL_RCC_ClockConfig+0x244>)
 8002730:	4313      	orrs	r3, r2
 8002732:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002734:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d214      	bcs.n	800276c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b08      	ldr	r3, [pc, #32]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 020f 	bic.w	r2, r3, #15
 800274a:	4906      	ldr	r1, [pc, #24]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <HAL_RCC_ClockConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e086      	b.n	8002872 <HAL_RCC_ClockConfig+0x34e>
 8002764:	52002000 	.word	0x52002000
 8002768:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	4b3f      	ldr	r3, [pc, #252]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002784:	429a      	cmp	r2, r3
 8002786:	d208      	bcs.n	800279a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002788:	4b3c      	ldr	r3, [pc, #240]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	4939      	ldr	r1, [pc, #228]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 8002796:	4313      	orrs	r3, r2
 8002798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	4b34      	ldr	r3, [pc, #208]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d208      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027b6:	4b31      	ldr	r3, [pc, #196]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	492e      	ldr	r1, [pc, #184]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d010      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d208      	bcs.n	80027f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4922      	ldr	r1, [pc, #136]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d010      	beq.n	8002824 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800280e:	429a      	cmp	r2, r3
 8002810:	d208      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002812:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4917      	ldr	r1, [pc, #92]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 8002820:	4313      	orrs	r3, r2
 8002822:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002824:	f000 f834 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	4912      	ldr	r1, [pc, #72]	@ (8002880 <HAL_RCC_ClockConfig+0x35c>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002842:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <HAL_RCC_ClockConfig+0x358>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <HAL_RCC_ClockConfig+0x35c>)
 800284c:	5cd3      	ldrb	r3, [r2, r3]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
 8002858:	4a0a      	ldr	r2, [pc, #40]	@ (8002884 <HAL_RCC_ClockConfig+0x360>)
 800285a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <HAL_RCC_ClockConfig+0x364>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002862:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <HAL_RCC_ClockConfig+0x368>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe f890 	bl	800098c <HAL_InitTick>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	58024400 	.word	0x58024400
 8002880:	080042d0 	.word	0x080042d0
 8002884:	24000004 	.word	0x24000004
 8002888:	24000000 	.word	0x24000000
 800288c:	24000008 	.word	0x24000008

08002890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002896:	4bb3      	ldr	r3, [pc, #716]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800289e:	2b18      	cmp	r3, #24
 80028a0:	f200 8155 	bhi.w	8002b4e <HAL_RCC_GetSysClockFreq+0x2be>
 80028a4:	a201      	add	r2, pc, #4	@ (adr r2, 80028ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	08002911 	.word	0x08002911
 80028b0:	08002b4f 	.word	0x08002b4f
 80028b4:	08002b4f 	.word	0x08002b4f
 80028b8:	08002b4f 	.word	0x08002b4f
 80028bc:	08002b4f 	.word	0x08002b4f
 80028c0:	08002b4f 	.word	0x08002b4f
 80028c4:	08002b4f 	.word	0x08002b4f
 80028c8:	08002b4f 	.word	0x08002b4f
 80028cc:	08002937 	.word	0x08002937
 80028d0:	08002b4f 	.word	0x08002b4f
 80028d4:	08002b4f 	.word	0x08002b4f
 80028d8:	08002b4f 	.word	0x08002b4f
 80028dc:	08002b4f 	.word	0x08002b4f
 80028e0:	08002b4f 	.word	0x08002b4f
 80028e4:	08002b4f 	.word	0x08002b4f
 80028e8:	08002b4f 	.word	0x08002b4f
 80028ec:	0800293d 	.word	0x0800293d
 80028f0:	08002b4f 	.word	0x08002b4f
 80028f4:	08002b4f 	.word	0x08002b4f
 80028f8:	08002b4f 	.word	0x08002b4f
 80028fc:	08002b4f 	.word	0x08002b4f
 8002900:	08002b4f 	.word	0x08002b4f
 8002904:	08002b4f 	.word	0x08002b4f
 8002908:	08002b4f 	.word	0x08002b4f
 800290c:	08002943 	.word	0x08002943
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002910:	4b94      	ldr	r3, [pc, #592]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800291c:	4b91      	ldr	r3, [pc, #580]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	4a90      	ldr	r2, [pc, #576]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800292e:	e111      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002930:	4b8d      	ldr	r3, [pc, #564]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002932:	61bb      	str	r3, [r7, #24]
      break;
 8002934:	e10e      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002936:	4b8d      	ldr	r3, [pc, #564]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002938:	61bb      	str	r3, [r7, #24]
      break;
 800293a:	e10b      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800293c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800293e:	61bb      	str	r3, [r7, #24]
      break;
 8002940:	e108      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002942:	4b88      	ldr	r3, [pc, #544]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800294c:	4b85      	ldr	r3, [pc, #532]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002956:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002958:	4b82      	ldr	r3, [pc, #520]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002962:	4b80      	ldr	r3, [pc, #512]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80e1 	beq.w	8002b48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b02      	cmp	r3, #2
 800298a:	f000 8083 	beq.w	8002a94 <HAL_RCC_GetSysClockFreq+0x204>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b02      	cmp	r3, #2
 8002992:	f200 80a1 	bhi.w	8002ad8 <HAL_RCC_GetSysClockFreq+0x248>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x114>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d056      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029a2:	e099      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02d      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
 80029c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029da:	4b62      	ldr	r3, [pc, #392]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a0a:	e087      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002b78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1e:	4b51      	ldr	r3, [pc, #324]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a4e:	e065      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a62:	4b40      	ldr	r3, [pc, #256]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a92:	e043      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002b80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ad6:	e021      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002b7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aea:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002b74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	0a5b      	lsrs	r3, r3, #9
 8002b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b26:	3301      	adds	r3, #1
 8002b28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b40:	ee17 3a90 	vmov	r3, s15
 8002b44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b46:	e005      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
      break;
 8002b4c:	e002      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b4e:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b50:	61bb      	str	r3, [r7, #24]
      break;
 8002b52:	bf00      	nop
  }

  return sysclockfreq;
 8002b54:	69bb      	ldr	r3, [r7, #24]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	@ 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	58024400 	.word	0x58024400
 8002b68:	03d09000 	.word	0x03d09000
 8002b6c:	003d0900 	.word	0x003d0900
 8002b70:	017d7840 	.word	0x017d7840
 8002b74:	46000000 	.word	0x46000000
 8002b78:	4c742400 	.word	0x4c742400
 8002b7c:	4a742400 	.word	0x4a742400
 8002b80:	4bbebc20 	.word	0x4bbebc20

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b0ca      	sub	sp, #296	@ 0x128
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002ba8:	2500      	movs	r5, #0
 8002baa:	ea54 0305 	orrs.w	r3, r4, r5
 8002bae:	d049      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bba:	d02f      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bc0:	d828      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bc6:	d01a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bcc:	d822      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd6:	d007      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bda:	4bb8      	ldr	r3, [pc, #736]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4ab7      	ldr	r2, [pc, #732]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002be6:	e01a      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	3308      	adds	r3, #8
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 f9d1 	bl	8003f98 <RCCEx_PLL2_Config>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bfc:	e00f      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c02:	3328      	adds	r3, #40	@ 0x28
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 fa78 	bl	80040fc <RCCEx_PLL3_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c12:	e004      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c1a:	e000      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c26:	4ba5      	ldr	r3, [pc, #660]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c34:	4aa1      	ldr	r2, [pc, #644]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c3a:	e003      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c50:	f04f 0900 	mov.w	r9, #0
 8002c54:	ea58 0309 	orrs.w	r3, r8, r9
 8002c58:	d047      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d82a      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c81 	.word	0x08002c81
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002ca5 	.word	0x08002ca5
 8002c78:	08002cc3 	.word	0x08002cc3
 8002c7c:	08002cc3 	.word	0x08002cc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c80:	4b8e      	ldr	r3, [pc, #568]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	4a8d      	ldr	r2, [pc, #564]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c8c:	e01a      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c92:	3308      	adds	r3, #8
 8002c94:	2100      	movs	r1, #0
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 f97e 	bl	8003f98 <RCCEx_PLL2_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ca2:	e00f      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca8:	3328      	adds	r3, #40	@ 0x28
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 fa25 	bl	80040fc <RCCEx_PLL3_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cb8:	e004      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd0:	f023 0107 	bic.w	r1, r3, #7
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	4a78      	ldr	r2, [pc, #480]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ce0:	e003      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002cf6:	f04f 0b00 	mov.w	fp, #0
 8002cfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cfe:	d04c      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d0a:	d030      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d10:	d829      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d14:	d02d      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d18:	d825      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d1a:	2b80      	cmp	r3, #128	@ 0x80
 8002d1c:	d018      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d1e:	2b80      	cmp	r3, #128	@ 0x80
 8002d20:	d821      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d26:	2b40      	cmp	r3, #64	@ 0x40
 8002d28:	d007      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d2a:	e01c      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d2c:	4b63      	ldr	r3, [pc, #396]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	4a62      	ldr	r2, [pc, #392]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d38:	e01c      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3e:	3308      	adds	r3, #8
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 f928 	bl	8003f98 <RCCEx_PLL2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d4e:	e011      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d54:	3328      	adds	r3, #40	@ 0x28
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 f9cf 	bl	80040fc <RCCEx_PLL3_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d64:	e006      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d80:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8a:	4a4c      	ldr	r2, [pc, #304]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d90:	e003      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002da6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002db0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002db4:	460b      	mov	r3, r1
 8002db6:	4313      	orrs	r3, r2
 8002db8:	d053      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002dc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dc6:	d035      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002dc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dcc:	d82e      	bhi.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002dd2:	d031      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002dd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002dd8:	d828      	bhi.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dde:	d01a      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de4:	d822      	bhi.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dee:	d007      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002df0:	e01c      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df2:	4b32      	ldr	r3, [pc, #200]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df6:	4a31      	ldr	r2, [pc, #196]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dfe:	e01c      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e04:	3308      	adds	r3, #8
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 f8c5 	bl	8003f98 <RCCEx_PLL2_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e14:	e011      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1a:	3328      	adds	r3, #40	@ 0x28
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 f96c 	bl	80040fc <RCCEx_PLL3_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e2a:	e006      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e32:	e002      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e42:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e52:	4a1a      	ldr	r2, [pc, #104]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e58:	e003      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	d056      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e8e:	d038      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e94:	d831      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e9a:	d034      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ea0:	d82b      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ea8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eac:	d825      	bhi.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002eb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002eb8:	e01f      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eba:	bf00      	nop
 8002ebc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec0:	4ba2      	ldr	r3, [pc, #648]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	4aa1      	ldr	r2, [pc, #644]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 f85e 	bl	8003f98 <RCCEx_PLL2_Config>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ee2:	e011      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee8:	3328      	adds	r3, #40	@ 0x28
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f905 	bl	80040fc <RCCEx_PLL3_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ef8:	e006      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f00:	e002      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f10:	4b8e      	ldr	r3, [pc, #568]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f20:	4a8a      	ldr	r2, [pc, #552]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f22:	430b      	orrs	r3, r1
 8002f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f26:	e003      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	d03a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	2b30      	cmp	r3, #48	@ 0x30
 8002f58:	d01f      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f5a:	2b30      	cmp	r3, #48	@ 0x30
 8002f5c:	d819      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d815      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d019      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d111      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6e:	4b77      	ldr	r3, [pc, #476]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	4a76      	ldr	r2, [pc, #472]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f7a:	e011      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f80:	3308      	adds	r3, #8
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 f807 	bl	8003f98 <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f90:	e006      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f98:	e002      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f9a:	bf00      	nop
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fa8:	4b68      	ldr	r3, [pc, #416]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb6:	4a65      	ldr	r2, [pc, #404]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fbc:	e003      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	d051      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff0:	d035      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ff6:	d82e      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ff8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ffc:	d031      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ffe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003002:	d828      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003008:	d01a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800300a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800300e:	d822      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003018:	d007      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800301a:	e01c      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301c:	4b4b      	ldr	r3, [pc, #300]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	4a4a      	ldr	r2, [pc, #296]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003028:	e01c      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800302e:	3308      	adds	r3, #8
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ffb0 	bl	8003f98 <RCCEx_PLL2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800303e:	e011      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003044:	3328      	adds	r3, #40	@ 0x28
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f001 f857 	bl	80040fc <RCCEx_PLL3_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800305c:	e002      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800305e:	bf00      	nop
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800306c:	4b37      	ldr	r3, [pc, #220]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800306e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003070:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307a:	4a34      	ldr	r2, [pc, #208]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307c:	430b      	orrs	r3, r1
 800307e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800308a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80030a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80030a4:	460b      	mov	r3, r1
 80030a6:	4313      	orrs	r3, r2
 80030a8:	d056      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d033      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80030b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ba:	d82c      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030c0:	d02f      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80030c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030c6:	d826      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030cc:	d02b      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030d2:	d820      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030d8:	d012      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030de:	d81a      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d022      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e8:	d115      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	3308      	adds	r3, #8
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 ff50 	bl	8003f98 <RCCEx_PLL2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030fe:	e015      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003104:	3328      	adds	r3, #40	@ 0x28
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fff7 	bl	80040fc <RCCEx_PLL3_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003114:	e00a      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800311c:	e006      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800311e:	bf00      	nop
 8003120:	e004      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800312a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003138:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003140:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003142:	4a02      	ldr	r2, [pc, #8]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003144:	430b      	orrs	r3, r1
 8003146:	6513      	str	r3, [r2, #80]	@ 0x50
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800314a:	bf00      	nop
 800314c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800316e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003172:	460b      	mov	r3, r1
 8003174:	4313      	orrs	r3, r2
 8003176:	d055      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003184:	d033      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800318a:	d82c      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d02f      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003196:	d826      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003198:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800319c:	d02b      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800319e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031a2:	d820      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031a8:	d012      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80031aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ae:	d81a      	bhi.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d022      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80031b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b8:	d115      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031be:	3308      	adds	r3, #8
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fee8 	bl	8003f98 <RCCEx_PLL2_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031ce:	e015      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	3328      	adds	r3, #40	@ 0x28
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 ff8f 	bl	80040fc <RCCEx_PLL3_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031e4:	e00a      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003204:	4ba3      	ldr	r3, [pc, #652]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003214:	4a9f      	ldr	r2, [pc, #636]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003216:	430b      	orrs	r3, r1
 8003218:	6593      	str	r3, [r2, #88]	@ 0x58
 800321a:	e003      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800323a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800323e:	460b      	mov	r3, r1
 8003240:	4313      	orrs	r3, r2
 8003242:	d037      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800324e:	d00e      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003254:	d816      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800325a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325e:	d111      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	4b8c      	ldr	r3, [pc, #560]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	4a8b      	ldr	r2, [pc, #556]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800326c:	e00f      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003272:	3308      	adds	r3, #8
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fe8e 	bl	8003f98 <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003282:	e004      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800328c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003296:	4b7f      	ldr	r3, [pc, #508]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	4a7b      	ldr	r2, [pc, #492]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80032ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	d039      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d81c      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80032de:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003321 	.word	0x08003321
 80032e8:	080032f5 	.word	0x080032f5
 80032ec:	08003303 	.word	0x08003303
 80032f0:	08003321 	.word	0x08003321
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4b67      	ldr	r3, [pc, #412]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	4a66      	ldr	r2, [pc, #408]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003300:	e00f      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	3308      	adds	r3, #8
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fe44 	bl	8003f98 <RCCEx_PLL2_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003316:	e004      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800332a:	4b5a      	ldr	r3, [pc, #360]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332e:	f023 0103 	bic.w	r1, r3, #3
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003338:	4a56      	ldr	r2, [pc, #344]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800333a:	430b      	orrs	r3, r1
 800333c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800333e:	e003      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003354:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800335e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003362:	460b      	mov	r3, r1
 8003364:	4313      	orrs	r3, r2
 8003366:	f000 809f 	beq.w	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336a:	4b4b      	ldr	r3, [pc, #300]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a4a      	ldr	r2, [pc, #296]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003376:	f7fd fb53 	bl	8000a20 <HAL_GetTick>
 800337a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800337e:	e00b      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7fd fb4e 	bl	8000a20 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b64      	cmp	r3, #100	@ 0x64
 800338e:	d903      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003398:	4b3f      	ldr	r3, [pc, #252]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ed      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80033a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d179      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033ac:	4b39      	ldr	r3, [pc, #228]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033b8:	4053      	eors	r3, r2
 80033ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d015      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c2:	4b34      	ldr	r3, [pc, #208]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ce:	4b31      	ldr	r3, [pc, #196]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	4a30      	ldr	r2, [pc, #192]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033da:	4b2e      	ldr	r3, [pc, #184]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	4a2d      	ldr	r2, [pc, #180]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fa:	d118      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fd fb10 	bl	8000a20 <HAL_GetTick>
 8003400:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003404:	e00d      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd fb0b 	bl	8000a20 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003410:	1ad2      	subs	r2, r2, r3
 8003412:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003416:	429a      	cmp	r2, r3
 8003418:	d903      	bls.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003420:	e005      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003422:	4b1c      	ldr	r3, [pc, #112]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0eb      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800342e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003432:	2b00      	cmp	r3, #0
 8003434:	d129      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800343e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003446:	d10e      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003448:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003458:	091a      	lsrs	r2, r3, #4
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800345c:	4013      	ands	r3, r2
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003460:	430b      	orrs	r3, r1
 8003462:	6113      	str	r3, [r2, #16]
 8003464:	e005      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800346c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003470:	6113      	str	r3, [r2, #16]
 8003472:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003474:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800347e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003482:	4a04      	ldr	r2, [pc, #16]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003484:	430b      	orrs	r3, r1
 8003486:	6713      	str	r3, [r2, #112]	@ 0x70
 8003488:	e00e      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800348a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003492:	e009      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003494:	58024400 	.word	0x58024400
 8003498:	58024800 	.word	0x58024800
 800349c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f002 0301 	and.w	r3, r2, #1
 80034b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f000 8089 	beq.w	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d0:	2b28      	cmp	r3, #40	@ 0x28
 80034d2:	d86b      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80034d4:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080035b5 	.word	0x080035b5
 80034e0:	080035ad 	.word	0x080035ad
 80034e4:	080035ad 	.word	0x080035ad
 80034e8:	080035ad 	.word	0x080035ad
 80034ec:	080035ad 	.word	0x080035ad
 80034f0:	080035ad 	.word	0x080035ad
 80034f4:	080035ad 	.word	0x080035ad
 80034f8:	080035ad 	.word	0x080035ad
 80034fc:	08003581 	.word	0x08003581
 8003500:	080035ad 	.word	0x080035ad
 8003504:	080035ad 	.word	0x080035ad
 8003508:	080035ad 	.word	0x080035ad
 800350c:	080035ad 	.word	0x080035ad
 8003510:	080035ad 	.word	0x080035ad
 8003514:	080035ad 	.word	0x080035ad
 8003518:	080035ad 	.word	0x080035ad
 800351c:	08003597 	.word	0x08003597
 8003520:	080035ad 	.word	0x080035ad
 8003524:	080035ad 	.word	0x080035ad
 8003528:	080035ad 	.word	0x080035ad
 800352c:	080035ad 	.word	0x080035ad
 8003530:	080035ad 	.word	0x080035ad
 8003534:	080035ad 	.word	0x080035ad
 8003538:	080035ad 	.word	0x080035ad
 800353c:	080035b5 	.word	0x080035b5
 8003540:	080035ad 	.word	0x080035ad
 8003544:	080035ad 	.word	0x080035ad
 8003548:	080035ad 	.word	0x080035ad
 800354c:	080035ad 	.word	0x080035ad
 8003550:	080035ad 	.word	0x080035ad
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035ad 	.word	0x080035ad
 8003564:	080035ad 	.word	0x080035ad
 8003568:	080035ad 	.word	0x080035ad
 800356c:	080035ad 	.word	0x080035ad
 8003570:	080035ad 	.word	0x080035ad
 8003574:	080035ad 	.word	0x080035ad
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035b5 	.word	0x080035b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	3308      	adds	r3, #8
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fd05 	bl	8003f98 <RCCEx_PLL2_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003594:	e00f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	3328      	adds	r3, #40	@ 0x28
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fdac 	bl	80040fc <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035be:	4bbf      	ldr	r3, [pc, #764]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035cc:	4abb      	ldr	r2, [pc, #748]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 0302 	and.w	r3, r2, #2
 80035e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d041      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003602:	2b05      	cmp	r3, #5
 8003604:	d824      	bhi.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003606:	a201      	add	r2, pc, #4	@ (adr r2, 800360c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	08003659 	.word	0x08003659
 8003610:	08003625 	.word	0x08003625
 8003614:	0800363b 	.word	0x0800363b
 8003618:	08003659 	.word	0x08003659
 800361c:	08003659 	.word	0x08003659
 8003620:	08003659 	.word	0x08003659
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	3308      	adds	r3, #8
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fcb3 	bl	8003f98 <RCCEx_PLL2_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003638:	e00f      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363e:	3328      	adds	r3, #40	@ 0x28
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fd5a 	bl	80040fc <RCCEx_PLL3_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800364e:	e004      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003656:	e000      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003662:	4b96      	ldr	r3, [pc, #600]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003666:	f023 0107 	bic.w	r1, r3, #7
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003670:	4a92      	ldr	r2, [pc, #584]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003672:	430b      	orrs	r3, r1
 8003674:	6553      	str	r3, [r2, #84]	@ 0x54
 8003676:	e003      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800367c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f002 0304 	and.w	r3, r2, #4
 800368c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003696:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800369a:	460b      	mov	r3, r1
 800369c:	4313      	orrs	r3, r2
 800369e:	d044      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d825      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80036ac:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	08003701 	.word	0x08003701
 80036b8:	080036cd 	.word	0x080036cd
 80036bc:	080036e3 	.word	0x080036e3
 80036c0:	08003701 	.word	0x08003701
 80036c4:	08003701 	.word	0x08003701
 80036c8:	08003701 	.word	0x08003701
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d0:	3308      	adds	r3, #8
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fc5f 	bl	8003f98 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036e0:	e00f      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fd06 	bl	80040fc <RCCEx_PLL3_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800370a:	4b6c      	ldr	r3, [pc, #432]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	f023 0107 	bic.w	r1, r3, #7
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800371c:	430b      	orrs	r3, r1
 800371e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f002 0320 	and.w	r3, r2, #32
 8003736:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d055      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003756:	d033      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800375c:	d82c      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800375e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003762:	d02f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003768:	d826      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800376a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800376e:	d02b      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003774:	d820      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800377a:	d012      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003780:	d81a      	bhi.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d022      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378a:	d115      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003790:	3308      	adds	r3, #8
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fbff 	bl	8003f98 <RCCEx_PLL2_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037a0:	e015      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	3328      	adds	r3, #40	@ 0x28
 80037a8:	2102      	movs	r1, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fca6 	bl	80040fc <RCCEx_PLL3_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037b6:	e00a      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037be:	e006      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037c0:	bf00      	nop
 80037c2:	e004      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037c4:	bf00      	nop
 80037c6:	e002      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037c8:	bf00      	nop
 80037ca:	e000      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037d6:	4b39      	ldr	r3, [pc, #228]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a35      	ldr	r2, [pc, #212]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800380c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d058      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800381e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003822:	d033      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003824:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003828:	d82c      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382e:	d02f      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003834:	d826      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003836:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800383a:	d02b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800383c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003840:	d820      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003846:	d012      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800384c:	d81a      	bhi.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d022      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003856:	d115      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	3308      	adds	r3, #8
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb99 	bl	8003f98 <RCCEx_PLL2_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800386c:	e015      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	3328      	adds	r3, #40	@ 0x28
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fc40 	bl	80040fc <RCCEx_PLL3_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003882:	e00a      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800388a:	e006      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800388c:	bf00      	nop
 800388e:	e004      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003890:	bf00      	nop
 8003892:	e002      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038b2:	4a02      	ldr	r2, [pc, #8]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80038ba:	bf00      	nop
 80038bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	d055      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038f4:	d033      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80038f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80038fa:	d82c      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003900:	d02f      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003906:	d826      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003908:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800390c:	d02b      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800390e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003912:	d820      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003914:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003918:	d012      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391e:	d81a      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d022      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003928:	d115      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fb30 	bl	8003f98 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800393e:	e015      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	3328      	adds	r3, #40	@ 0x28
 8003946:	2102      	movs	r1, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fbd7 	bl	80040fc <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003954:	e00a      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395c:	e006      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800395e:	bf00      	nop
 8003960:	e004      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800396a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003974:	4ba1      	ldr	r3, [pc, #644]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003978:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003980:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003984:	4a9d      	ldr	r2, [pc, #628]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003986:	430b      	orrs	r3, r1
 8003988:	6593      	str	r3, [r2, #88]	@ 0x58
 800398a:	e003      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f002 0308 	and.w	r3, r2, #8
 80039a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	d01e      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c6:	3328      	adds	r3, #40	@ 0x28
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fb96 	bl	80040fc <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039dc:	4b87      	ldr	r3, [pc, #540]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ec:	4a83      	ldr	r2, [pc, #524]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ee:	430b      	orrs	r3, r1
 80039f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f002 0310 	and.w	r3, r2, #16
 80039fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d01e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	3328      	adds	r3, #40	@ 0x28
 8003a26:	2102      	movs	r1, #2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fb67 	bl	80040fc <RCCEx_PLL3_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a3a:	4b70      	ldr	r3, [pc, #448]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	d03e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a7c:	d022      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a82:	d81b      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003a8e:	e015      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	3308      	adds	r3, #8
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa7d 	bl	8003f98 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	3328      	adds	r3, #40	@ 0x28
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fb24 	bl	80040fc <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ace:	4b4b      	ldr	r3, [pc, #300]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ade:	4a47      	ldr	r2, [pc, #284]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003afa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003afc:	2300      	movs	r3, #0
 8003afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b04:	460b      	mov	r3, r1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	d03b      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b16:	d01f      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b1c:	d818      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b22:	d003      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003b24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b28:	d007      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b2a:	e011      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2c:	4b33      	ldr	r3, [pc, #204]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	4a32      	ldr	r2, [pc, #200]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b38:	e00f      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	3328      	adds	r3, #40	@ 0x28
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fada 	bl	80040fc <RCCEx_PLL3_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b4e:	e004      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b62:	4b26      	ldr	r3, [pc, #152]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	4a22      	ldr	r2, [pc, #136]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b78:	e003      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b90:	2300      	movs	r3, #0
 8003b92:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d034      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bac:	d007      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003bae:	e011      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4b12      	ldr	r3, [pc, #72]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4a11      	ldr	r2, [pc, #68]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00e      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f9e6 	bl	8003f98 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	4a02      	ldr	r2, [pc, #8]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bf8:	e006      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003bfa:	bf00      	nop
 8003bfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c16:	2300      	movs	r3, #0
 8003c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	d00c      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	3328      	adds	r3, #40	@ 0x28
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fa65 	bl	80040fc <RCCEx_PLL3_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d038      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c66:	d018      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003c68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c6c:	d811      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c72:	d014      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c78:	d80b      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d011      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c82:	d106      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c84:	4bc3      	ldr	r3, [pc, #780]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	4ac2      	ldr	r2, [pc, #776]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c90:	e008      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c98:	e004      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cac:	4bb9      	ldr	r3, [pc, #740]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cbc:	4ab5      	ldr	r2, [pc, #724]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cda:	2300      	movs	r3, #0
 8003cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ce8:	4baa      	ldr	r3, [pc, #680]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf6:	4aa7      	ldr	r2, [pc, #668]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d08:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d18:	4b9e      	ldr	r3, [pc, #632]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d28:	4a9a      	ldr	r2, [pc, #616]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d44:	460b      	mov	r3, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d4a:	4b92      	ldr	r3, [pc, #584]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d4e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d58:	4a8e      	ldr	r2, [pc, #568]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003d6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d7a:	4b86      	ldr	r3, [pc, #536]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	4a85      	ldr	r2, [pc, #532]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d84:	6113      	str	r3, [r2, #16]
 8003d86:	4b83      	ldr	r3, [pc, #524]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d88:	6919      	ldr	r1, [r3, #16]
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d92:	4a80      	ldr	r2, [pc, #512]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003da4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003da6:	2300      	movs	r3, #0
 8003da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003daa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003db4:	4b77      	ldr	r3, [pc, #476]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	4a74      	ldr	r2, [pc, #464]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003de4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df4:	4a67      	ldr	r2, [pc, #412]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	2100      	movs	r1, #0
 8003e04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e10:	460b      	mov	r3, r1
 8003e12:	4313      	orrs	r3, r2
 8003e14:	d011      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f8ba 	bl	8003f98 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	2100      	movs	r1, #0
 8003e44:	6239      	str	r1, [r7, #32]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d011      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f89a 	bl	8003f98 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	2100      	movs	r1, #0
 8003e84:	61b9      	str	r1, [r7, #24]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d011      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f87a 	bl	8003f98 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6139      	str	r1, [r7, #16]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	d011      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	3328      	adds	r3, #40	@ 0x28
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f90c 	bl	80040fc <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	2100      	movs	r1, #0
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f10:	460b      	mov	r3, r1
 8003f12:	4313      	orrs	r3, r2
 8003f14:	d011      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1a:	3328      	adds	r3, #40	@ 0x28
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f8ec 	bl	80040fc <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	2100      	movs	r1, #0
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	607b      	str	r3, [r7, #4]
 8003f4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d011      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5a:	3328      	adds	r3, #40	@ 0x28
 8003f5c:	2102      	movs	r1, #2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f8cc 	bl	80040fc <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003f7a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f94:	58024400 	.word	0x58024400

08003f98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fa6:	4b53      	ldr	r3, [pc, #332]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d101      	bne.n	8003fb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e099      	b.n	80040ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a4e      	ldr	r2, [pc, #312]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fc fd2d 	bl	8000a20 <HAL_GetTick>
 8003fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fca:	f7fc fd29 	bl	8000a20 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e086      	b.n	80040ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fdc:	4b45      	ldr	r3, [pc, #276]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fe8:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	493f      	ldr	r1, [pc, #252]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	3b01      	subs	r3, #1
 8004002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	3b01      	subs	r3, #1
 800400c:	025b      	lsls	r3, r3, #9
 800400e:	b29b      	uxth	r3, r3
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	3b01      	subs	r3, #1
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800402c:	4931      	ldr	r1, [pc, #196]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004032:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	492d      	ldr	r1, [pc, #180]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004044:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	f023 0220 	bic.w	r2, r3, #32
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	4928      	ldr	r1, [pc, #160]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004056:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	4a26      	ldr	r2, [pc, #152]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800405c:	f023 0310 	bic.w	r3, r3, #16
 8004060:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004062:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004066:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <RCCEx_PLL2_Config+0x160>)
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	69d2      	ldr	r2, [r2, #28]
 800406e:	00d2      	lsls	r2, r2, #3
 8004070:	4920      	ldr	r1, [pc, #128]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004072:	4313      	orrs	r3, r2
 8004074:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004076:	4b1f      	ldr	r3, [pc, #124]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	4a1e      	ldr	r2, [pc, #120]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800407c:	f043 0310 	orr.w	r3, r3, #16
 8004080:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004088:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	4a19      	ldr	r2, [pc, #100]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800408e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004092:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004094:	e00f      	b.n	80040b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800409c:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040a8:	e005      	b.n	80040b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ae:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040b6:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a0e      	ldr	r2, [pc, #56]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c2:	f7fc fcad 	bl	8000a20 <HAL_GetTick>
 80040c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040c8:	e008      	b.n	80040dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040ca:	f7fc fca9 	bl	8000a20 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e006      	b.n	80040ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <RCCEx_PLL2_Config+0x15c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	58024400 	.word	0x58024400
 80040f8:	ffff0007 	.word	0xffff0007

080040fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800410a:	4b53      	ldr	r3, [pc, #332]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d101      	bne.n	800411a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e099      	b.n	800424e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800411a:	4b4f      	ldr	r3, [pc, #316]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a4e      	ldr	r2, [pc, #312]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004126:	f7fc fc7b 	bl	8000a20 <HAL_GetTick>
 800412a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800412c:	e008      	b.n	8004140 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800412e:	f7fc fc77 	bl	8000a20 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e086      	b.n	800424e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004140:	4b45      	ldr	r3, [pc, #276]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800414c:	4b42      	ldr	r3, [pc, #264]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	051b      	lsls	r3, r3, #20
 800415a:	493f      	ldr	r1, [pc, #252]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	3b01      	subs	r3, #1
 8004166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	3b01      	subs	r3, #1
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	b29b      	uxth	r3, r3
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	3b01      	subs	r3, #1
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	3b01      	subs	r3, #1
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004190:	4931      	ldr	r1, [pc, #196]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004196:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	492d      	ldr	r1, [pc, #180]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4928      	ldr	r1, [pc, #160]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041ba:	4b27      	ldr	r3, [pc, #156]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	4a26      	ldr	r2, [pc, #152]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041c6:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ca:	4b24      	ldr	r3, [pc, #144]	@ (800425c <RCCEx_PLL3_Config+0x160>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	69d2      	ldr	r2, [r2, #28]
 80041d2:	00d2      	lsls	r2, r2, #3
 80041d4:	4920      	ldr	r1, [pc, #128]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041da:	4b1f      	ldr	r3, [pc, #124]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	4a1e      	ldr	r2, [pc, #120]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 80041f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041f8:	e00f      	b.n	800421a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d106      	bne.n	800420e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004200:	4b15      	ldr	r3, [pc, #84]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	4a14      	ldr	r2, [pc, #80]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004206:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800420a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800420c:	e005      	b.n	800421a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800420e:	4b12      	ldr	r3, [pc, #72]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	4a11      	ldr	r2, [pc, #68]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004214:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004218:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800421a:	4b0f      	ldr	r3, [pc, #60]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a0e      	ldr	r2, [pc, #56]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004226:	f7fc fbfb 	bl	8000a20 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800422c:	e008      	b.n	8004240 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800422e:	f7fc fbf7 	bl	8000a20 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e006      	b.n	800424e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <RCCEx_PLL3_Config+0x15c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
 800425c:	ffff0007 	.word	0xffff0007

08004260 <memset>:
 8004260:	4402      	add	r2, r0
 8004262:	4603      	mov	r3, r0
 8004264:	4293      	cmp	r3, r2
 8004266:	d100      	bne.n	800426a <memset+0xa>
 8004268:	4770      	bx	lr
 800426a:	f803 1b01 	strb.w	r1, [r3], #1
 800426e:	e7f9      	b.n	8004264 <memset+0x4>

08004270 <__libc_init_array>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4d0d      	ldr	r5, [pc, #52]	@ (80042a8 <__libc_init_array+0x38>)
 8004274:	4c0d      	ldr	r4, [pc, #52]	@ (80042ac <__libc_init_array+0x3c>)
 8004276:	1b64      	subs	r4, r4, r5
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	2600      	movs	r6, #0
 800427c:	42a6      	cmp	r6, r4
 800427e:	d109      	bne.n	8004294 <__libc_init_array+0x24>
 8004280:	4d0b      	ldr	r5, [pc, #44]	@ (80042b0 <__libc_init_array+0x40>)
 8004282:	4c0c      	ldr	r4, [pc, #48]	@ (80042b4 <__libc_init_array+0x44>)
 8004284:	f000 f818 	bl	80042b8 <_init>
 8004288:	1b64      	subs	r4, r4, r5
 800428a:	10a4      	asrs	r4, r4, #2
 800428c:	2600      	movs	r6, #0
 800428e:	42a6      	cmp	r6, r4
 8004290:	d105      	bne.n	800429e <__libc_init_array+0x2e>
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	f855 3b04 	ldr.w	r3, [r5], #4
 8004298:	4798      	blx	r3
 800429a:	3601      	adds	r6, #1
 800429c:	e7ee      	b.n	800427c <__libc_init_array+0xc>
 800429e:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a2:	4798      	blx	r3
 80042a4:	3601      	adds	r6, #1
 80042a6:	e7f2      	b.n	800428e <__libc_init_array+0x1e>
 80042a8:	080042e0 	.word	0x080042e0
 80042ac:	080042e0 	.word	0x080042e0
 80042b0:	080042e0 	.word	0x080042e0
 80042b4:	080042e4 	.word	0x080042e4

080042b8 <_init>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr

080042c4 <_fini>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr
