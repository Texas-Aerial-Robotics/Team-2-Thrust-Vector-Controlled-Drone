
TAR-Team2-DART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080038c4  080038c4  000048c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080038d4  080038d4  000048d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080038dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  24000010  080038ec  00005010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000084  080038ec  00005084  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c35d  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001aa1  00000000  00000000  0001139b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a08  00000000  00000000  00012e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007a5  00000000  00000000  00013848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034c89  00000000  00000000  00013fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d9ce  00000000  00000000  00048c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014f6f0  00000000  00000000  00056644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a5d34  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028a8  00000000  00000000  001a5d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  001a8620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080038ac 	.word	0x080038ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080038ac 	.word	0x080038ac

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002dc:	f000 f8f8 	bl	80004d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 fa8e 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f806 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f8ae 	bl	8000448 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ec:	f000 f86c 	bl	80003c8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x18>

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b09c      	sub	sp, #112	@ 0x70
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002fe:	224c      	movs	r2, #76	@ 0x4c
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f003 faa6 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2220      	movs	r2, #32
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f003 faa0 	bl	8003854 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000314:	2002      	movs	r0, #2
 8000316:	f000 ff6b 	bl	80011f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800031a:	2300      	movs	r3, #0
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	4b28      	ldr	r3, [pc, #160]	@ (80003c0 <SystemClock_Config+0xcc>)
 8000320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000322:	4a27      	ldr	r2, [pc, #156]	@ (80003c0 <SystemClock_Config+0xcc>)
 8000324:	f023 0301 	bic.w	r3, r3, #1
 8000328:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800032a:	4b25      	ldr	r3, [pc, #148]	@ (80003c0 <SystemClock_Config+0xcc>)
 800032c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	4b23      	ldr	r3, [pc, #140]	@ (80003c4 <SystemClock_Config+0xd0>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800033c:	4a21      	ldr	r2, [pc, #132]	@ (80003c4 <SystemClock_Config+0xd0>)
 800033e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b1f      	ldr	r3, [pc, #124]	@ (80003c4 <SystemClock_Config+0xd0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000350:	bf00      	nop
 8000352:	4b1c      	ldr	r3, [pc, #112]	@ (80003c4 <SystemClock_Config+0xd0>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800035a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800035e:	d1f8      	bne.n	8000352 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	2302      	movs	r3, #2
 8000362:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000364:	2301      	movs	r3, #1
 8000366:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2340      	movs	r3, #64	@ 0x40
 800036a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800036c:	2300      	movs	r3, #0
 800036e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000374:	4618      	mov	r0, r3
 8000376:	f000 ff75 	bl	8001264 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000380:	f000 f8d2 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	233f      	movs	r3, #63	@ 0x3f
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000388:	2300      	movs	r3, #0
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000398:	2340      	movs	r3, #64	@ 0x40
 800039a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2101      	movs	r1, #1
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fbb5 	bl	8001b18 <HAL_RCC_ClockConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003b4:	f000 f8b8 	bl	8000528 <Error_Handler>
  }
}
 80003b8:	bf00      	nop
 80003ba:	3770      	adds	r7, #112	@ 0x70
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	58000400 	.word	0x58000400
 80003c4:	58024800 	.word	0x58024800

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_I2C1_Init+0x74>)
 80003ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000440 <MX_I2C1_Init+0x78>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80003d2:	4b1a      	ldr	r3, [pc, #104]	@ (800043c <MX_I2C1_Init+0x74>)
 80003d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000444 <MX_I2C1_Init+0x7c>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003de:	4b17      	ldr	r3, [pc, #92]	@ (800043c <MX_I2C1_Init+0x74>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ea:	4b14      	ldr	r3, [pc, #80]	@ (800043c <MX_I2C1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f6:	4b11      	ldr	r3, [pc, #68]	@ (800043c <MX_I2C1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000402:	480e      	ldr	r0, [pc, #56]	@ (800043c <MX_I2C1_Init+0x74>)
 8000404:	f000 fdc0 	bl	8000f88 <HAL_I2C_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800040e:	f000 f88b 	bl	8000528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000412:	2100      	movs	r1, #0
 8000414:	4809      	ldr	r0, [pc, #36]	@ (800043c <MX_I2C1_Init+0x74>)
 8000416:	f000 fe53 	bl	80010c0 <HAL_I2CEx_ConfigAnalogFilter>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000420:	f000 f882 	bl	8000528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000424:	2100      	movs	r1, #0
 8000426:	4805      	ldr	r0, [pc, #20]	@ (800043c <MX_I2C1_Init+0x74>)
 8000428:	f000 fe95 	bl	8001156 <HAL_I2CEx_ConfigDigitalFilter>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000432:	f000 f879 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	2400002c 	.word	0x2400002c
 8000440:	40005400 	.word	0x40005400
 8000444:	00300f38 	.word	0x00300f38

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <MX_GPIO_Init+0x80>)
 8000460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000464:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <MX_GPIO_Init+0x80>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800046e:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <MX_GPIO_Init+0x80>)
 8000470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <MX_GPIO_Init+0x80>)
 800047e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000482:	4a11      	ldr	r2, [pc, #68]	@ (80004c8 <MX_GPIO_Init+0x80>)
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800048c:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_GPIO_Init+0x80>)
 800048e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000492:	f003 0302 	and.w	r3, r3, #2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	480b      	ldr	r0, [pc, #44]	@ (80004cc <MX_GPIO_Init+0x84>)
 80004a0:	f000 fd58 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004a4:	2320      	movs	r3, #32
 80004a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	4619      	mov	r1, r3
 80004ba:	4804      	ldr	r0, [pc, #16]	@ (80004cc <MX_GPIO_Init+0x84>)
 80004bc:	f000 fb9a 	bl	8000bf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	58024400 	.word	0x58024400
 80004cc:	58020000 	.word	0x58020000

080004d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004e2:	f000 fb0f 	bl	8000b04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004e6:	2301      	movs	r3, #1
 80004e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004f2:	231f      	movs	r3, #31
 80004f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004f6:	2387      	movs	r3, #135	@ 0x87
 80004f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004fe:	2300      	movs	r3, #0
 8000500:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000502:	2301      	movs	r3, #1
 8000504:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000506:	2301      	movs	r3, #1
 8000508:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000512:	463b      	mov	r3, r7
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fb2d 	bl	8000b74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800051a:	2004      	movs	r0, #4
 800051c:	f000 fb0a 	bl	8000b34 <HAL_MPU_Enable>

}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <Error_Handler+0x8>

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <HAL_MspInit+0x30>)
 800053c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000540:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <HAL_MspInit+0x30>)
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <HAL_MspInit+0x30>)
 800054c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	58024400 	.word	0x58024400

08000568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0ba      	sub	sp, #232	@ 0xe8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	22c0      	movs	r2, #192	@ 0xc0
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f003 f963 	bl	8003854 <memset>
  if(hi2c->Instance==I2C1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a27      	ldr	r2, [pc, #156]	@ (8000630 <HAL_I2C_MspInit+0xc8>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d146      	bne.n	8000626 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000598:	f04f 0208 	mov.w	r2, #8
 800059c:	f04f 0300 	mov.w	r3, #0
 80005a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fde2 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80005ba:	f7ff ffb5 	bl	8000528 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <HAL_I2C_MspInit+0xcc>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000634 <HAL_I2C_MspInit+0xcc>)
 80005c6:	f043 0302 	orr.w	r3, r3, #2
 80005ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <HAL_I2C_MspInit+0xcc>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e4:	2312      	movs	r3, #18
 80005e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005f6:	2304      	movs	r3, #4
 80005f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	@ (8000638 <HAL_I2C_MspInit+0xd0>)
 8000604:	f000 faf6 	bl	8000bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_I2C_MspInit+0xcc>)
 800060a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800060e:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <HAL_I2C_MspInit+0xcc>)
 8000610:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000614:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <HAL_I2C_MspInit+0xcc>)
 800061a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800061e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000626:	bf00      	nop
 8000628:	37e8      	adds	r7, #232	@ 0xe8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40005400 	.word	0x40005400
 8000634:	58024400 	.word	0x58024400
 8000638:	58020400 	.word	0x58020400

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <NMI_Handler+0x4>

08000644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <HardFault_Handler+0x4>

0800064c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <MemManage_Handler+0x4>

08000654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <UsageFault_Handler+0x4>

08000664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000692:	f000 f927 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0xe4>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006a6:	4a36      	ldr	r2, [pc, #216]	@ (8000780 <SystemInit+0xe4>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b34      	ldr	r3, [pc, #208]	@ (8000784 <SystemInit+0xe8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0xe8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000784 <SystemInit+0xe8>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000788 <SystemInit+0xec>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000788 <SystemInit+0xec>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <SystemInit+0xec>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <SystemInit+0xec>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4929      	ldr	r1, [pc, #164]	@ (8000788 <SystemInit+0xec>)
 80006e4:	4b29      	ldr	r3, [pc, #164]	@ (800078c <SystemInit+0xf0>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <SystemInit+0xe8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0xe8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemInit+0xe8>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <SystemInit+0xec>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <SystemInit+0xec>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <SystemInit+0xec>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <SystemInit+0xec>)
 800071a:	4a1d      	ldr	r2, [pc, #116]	@ (8000790 <SystemInit+0xf4>)
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <SystemInit+0xec>)
 8000720:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0xf8>)
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <SystemInit+0xec>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <SystemInit+0xfc>)
 8000728:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <SystemInit+0xec>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <SystemInit+0xec>)
 8000732:	4a19      	ldr	r2, [pc, #100]	@ (8000798 <SystemInit+0xfc>)
 8000734:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <SystemInit+0xec>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <SystemInit+0xec>)
 800073e:	4a16      	ldr	r2, [pc, #88]	@ (8000798 <SystemInit+0xfc>)
 8000740:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <SystemInit+0xec>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <SystemInit+0xec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <SystemInit+0xec>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <SystemInit+0xec>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <SystemInit+0x100>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <SystemInit+0x104>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x108>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <SystemInit+0x10c>)
 8000770:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b0:	f7ff ff74 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	@ (80007ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	@ (80007f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f003 f843 	bl	8003864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007de:	f7ff fd7b 	bl	80002d8 <main>
  bx  lr
 80007e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007ec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007f0:	080038dc 	.word	0x080038dc
  ldr r2, =_sbss
 80007f4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007f8:	24000084 	.word	0x24000084

080007fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC3_IRQHandler>
	...

08000800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000806:	2003      	movs	r0, #3
 8000808:	f000 f94a 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800080c:	f001 fb3a 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8000810:	4602      	mov	r2, r0
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_Init+0x68>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	f003 030f 	and.w	r3, r3, #15
 800081c:	4913      	ldr	r1, [pc, #76]	@ (800086c <HAL_Init+0x6c>)
 800081e:	5ccb      	ldrb	r3, [r1, r3]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	fa22 f303 	lsr.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <HAL_Init+0x68>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <HAL_Init+0x6c>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	f003 031f 	and.w	r3, r3, #31
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	fa22 f303 	lsr.w	r3, r2, r3
 8000840:	4a0b      	ldr	r2, [pc, #44]	@ (8000870 <HAL_Init+0x70>)
 8000842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000844:	4a0b      	ldr	r2, [pc, #44]	@ (8000874 <HAL_Init+0x74>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084a:	200f      	movs	r0, #15
 800084c:	f000 f814 	bl	8000878 <HAL_InitTick>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e002      	b.n	8000860 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800085a:	f7ff fe6b 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58024400 	.word	0x58024400
 800086c:	080038c4 	.word	0x080038c4
 8000870:	24000004 	.word	0x24000004
 8000874:	24000000 	.word	0x24000000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_InitTick+0x60>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d101      	bne.n	800088c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	e021      	b.n	80008d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_InitTick+0x64>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_InitTick+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f921 	bl	8000aea <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f8f9 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <HAL_InitTick+0x68>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2400000c 	.word	0x2400000c
 80008dc:	24000000 	.word	0x24000000
 80008e0:	24000008 	.word	0x24000008

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	2400000c 	.word	0x2400000c
 8000908:	24000080 	.word	0x24000080

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	24000080 	.word	0x24000080

08000924 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000928:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <HAL_GetREVID+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0c1b      	lsrs	r3, r3, #16
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	5c001000 	.word	0x5c001000

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <__NVIC_SetPriorityGrouping+0x40>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	4313      	orrs	r3, r2
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <__NVIC_SetPriorityGrouping+0x40>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	05fa0000 	.word	0x05fa0000

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	@ (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	@ (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	@ 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	@ 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff47 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff5e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ff90 	bl	80009f4 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff5f 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffb2 	bl	8000a5c <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b08:	f3bf 8f5f 	dmb	sy
}
 8000b0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <HAL_MPU_Disable+0x28>)
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	4a06      	ldr	r2, [pc, #24]	@ (8000b2c <HAL_MPU_Disable+0x28>)
 8000b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b18:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_MPU_Disable+0x2c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	e000ed90 	.word	0xe000ed90

08000b34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b6c <HAL_MPU_Enable+0x38>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_MPU_Enable+0x3c>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b4a:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <HAL_MPU_Enable+0x3c>)
 8000b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b50:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b52:	f3bf 8f4f 	dsb	sy
}
 8000b56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b58:	f3bf 8f6f 	isb	sy
}
 8000b5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed90 	.word	0xe000ed90
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	785a      	ldrb	r2, [r3, #1]
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_MPU_ConfigRegion+0x7c>)
 8000b82:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <HAL_MPU_ConfigRegion+0x7c>)
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	4a19      	ldr	r2, [pc, #100]	@ (8000bf0 <HAL_MPU_ConfigRegion+0x7c>)
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000b90:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <HAL_MPU_ConfigRegion+0x7c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7b1b      	ldrb	r3, [r3, #12]
 8000b9c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7adb      	ldrb	r3, [r3, #11]
 8000ba2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ba4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7a9b      	ldrb	r3, [r3, #10]
 8000baa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7b5b      	ldrb	r3, [r3, #13]
 8000bb2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7b9b      	ldrb	r3, [r3, #14]
 8000bba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7bdb      	ldrb	r3, [r3, #15]
 8000bc2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7a5b      	ldrb	r3, [r3, #9]
 8000bca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7a1b      	ldrb	r3, [r3, #8]
 8000bd2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bd4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bde:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000be0:	6113      	str	r3, [r2, #16]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed90 	.word	0xe000ed90

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c02:	4b89      	ldr	r3, [pc, #548]	@ (8000e28 <HAL_GPIO_Init+0x234>)
 8000c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c06:	e194      	b.n	8000f32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 8186 	beq.w	8000f2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <HAL_GPIO_Init+0x44>
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d130      	bne.n	8000c9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	f003 0201 	and.w	r2, r3, #1
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d017      	beq.n	8000cd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d123      	bne.n	8000d2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	69b9      	ldr	r1, [r7, #24]
 8000d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0203 	and.w	r2, r3, #3
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 80e0 	beq.w	8000f2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <HAL_GPIO_Init+0x238>)
 8000d6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d72:	4a2e      	ldr	r2, [pc, #184]	@ (8000e2c <HAL_GPIO_Init+0x238>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000e2c <HAL_GPIO_Init+0x238>)
 8000d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8a:	4a29      	ldr	r2, [pc, #164]	@ (8000e30 <HAL_GPIO_Init+0x23c>)
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a20      	ldr	r2, [pc, #128]	@ (8000e34 <HAL_GPIO_Init+0x240>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d052      	beq.n	8000e5c <HAL_GPIO_Init+0x268>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e38 <HAL_GPIO_Init+0x244>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d031      	beq.n	8000e22 <HAL_GPIO_Init+0x22e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e3c <HAL_GPIO_Init+0x248>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d02b      	beq.n	8000e1e <HAL_GPIO_Init+0x22a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <HAL_GPIO_Init+0x24c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d025      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e44 <HAL_GPIO_Init+0x250>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d01f      	beq.n	8000e16 <HAL_GPIO_Init+0x222>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e48 <HAL_GPIO_Init+0x254>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d019      	beq.n	8000e12 <HAL_GPIO_Init+0x21e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e4c <HAL_GPIO_Init+0x258>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a19      	ldr	r2, [pc, #100]	@ (8000e50 <HAL_GPIO_Init+0x25c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00d      	beq.n	8000e0a <HAL_GPIO_Init+0x216>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <HAL_GPIO_Init+0x260>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x212>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_GPIO_Init+0x264>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_GPIO_Init+0x20e>
 8000dfe:	2309      	movs	r3, #9
 8000e00:	e02d      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e02:	230a      	movs	r3, #10
 8000e04:	e02b      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e06:	2308      	movs	r3, #8
 8000e08:	e029      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	e027      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e0e:	2306      	movs	r3, #6
 8000e10:	e025      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e12:	2305      	movs	r3, #5
 8000e14:	e023      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e16:	2304      	movs	r3, #4
 8000e18:	e021      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e01f      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e01d      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e01b      	b.n	8000e5e <HAL_GPIO_Init+0x26a>
 8000e26:	bf00      	nop
 8000e28:	58000080 	.word	0x58000080
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58000400 	.word	0x58000400
 8000e34:	58020000 	.word	0x58020000
 8000e38:	58020400 	.word	0x58020400
 8000e3c:	58020800 	.word	0x58020800
 8000e40:	58020c00 	.word	0x58020c00
 8000e44:	58021000 	.word	0x58021000
 8000e48:	58021400 	.word	0x58021400
 8000e4c:	58021800 	.word	0x58021800
 8000e50:	58021c00 	.word	0x58021c00
 8000e54:	58022000 	.word	0x58022000
 8000e58:	58022400 	.word	0x58022400
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6e:	4938      	ldr	r1, [pc, #224]	@ (8000f50 <HAL_GPIO_Init+0x35c>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ea2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f47f ae63 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3724      	adds	r7, #36	@ 0x24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	58000400 	.word	0x58000400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f70:	e003      	b.n	8000f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	041a      	lsls	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	619a      	str	r2, [r3, #24]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e08b      	b.n	80010b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fada 	bl	8000568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2224      	movs	r2, #36	@ 0x24
 8000fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d107      	bne.n	8001002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	e006      	b.n	8001010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800100e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d108      	bne.n	800102a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	e007      	b.n	800103a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6859      	ldr	r1, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <HAL_I2C_Init+0x134>)
 8001046:	430b      	orrs	r3, r1
 8001048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69d9      	ldr	r1, [r3, #28]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2220      	movs	r2, #32
 800109e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	02008000 	.word	0x02008000

080010c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b20      	cmp	r3, #32
 80010d4:	d138      	bne.n	8001148 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e032      	b.n	800114a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2224      	movs	r2, #36	@ 0x24
 80010f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0201 	bic.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001112:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2220      	movs	r2, #32
 8001138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	e000      	b.n	800114a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001148:	2302      	movs	r3, #2
  }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b20      	cmp	r3, #32
 800116a:	d139      	bne.n	80011e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001176:	2302      	movs	r3, #2
 8001178:	e033      	b.n	80011e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2224      	movs	r2, #36	@ 0x24
 8001186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0201 	bic.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2220      	movs	r2, #32
 80011d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	e000      	b.n	80011e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011e0:	2302      	movs	r3, #2
  }
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_PWREx_ConfigSupply+0x70>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b04      	cmp	r3, #4
 8001202:	d00a      	beq.n	800121a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_PWREx_ConfigSupply+0x70>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	d001      	beq.n	8001216 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e01f      	b.n	8001256 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e01d      	b.n	8001256 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_PWREx_ConfigSupply+0x70>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f023 0207 	bic.w	r2, r3, #7
 8001222:	490f      	ldr	r1, [pc, #60]	@ (8001260 <HAL_PWREx_ConfigSupply+0x70>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800122a:	f7ff fb6f 	bl	800090c <HAL_GetTick>
 800122e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001230:	e009      	b.n	8001246 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001232:	f7ff fb6b 	bl	800090c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001240:	d901      	bls.n	8001246 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e007      	b.n	8001256 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_PWREx_ConfigSupply+0x70>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800124e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001252:	d1ee      	bne.n	8001232 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	58024800 	.word	0x58024800

08001264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	@ 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	f000 bc48 	b.w	8001b08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8088 	beq.w	8001396 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001286:	4b99      	ldr	r3, [pc, #612]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001290:	4b96      	ldr	r3, [pc, #600]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001298:	2b10      	cmp	r3, #16
 800129a:	d007      	beq.n	80012ac <HAL_RCC_OscConfig+0x48>
 800129c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129e:	2b18      	cmp	r3, #24
 80012a0:	d111      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62>
 80012a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d10c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	4b8f      	ldr	r3, [pc, #572]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d06d      	beq.n	8001394 <HAL_RCC_OscConfig+0x130>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d169      	bne.n	8001394 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f000 bc21 	b.w	8001b08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x7a>
 80012d0:	4b86      	ldr	r3, [pc, #536]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a85      	ldr	r2, [pc, #532]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e02e      	b.n	800133c <HAL_RCC_OscConfig+0xd8>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x9c>
 80012e6:	4b81      	ldr	r3, [pc, #516]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a80      	ldr	r2, [pc, #512]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b7e      	ldr	r3, [pc, #504]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7d      	ldr	r2, [pc, #500]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80012f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xd8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0xc0>
 800130a:	4b78      	ldr	r3, [pc, #480]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a77      	ldr	r2, [pc, #476]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b75      	ldr	r3, [pc, #468]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a74      	ldr	r2, [pc, #464]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xd8>
 8001324:	4b71      	ldr	r3, [pc, #452]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a70      	ldr	r2, [pc, #448]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b6e      	ldr	r3, [pc, #440]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6d      	ldr	r2, [pc, #436]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fae2 	bl	800090c <HAL_GetTick>
 8001348:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fade 	bl	800090c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	@ 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e3d4      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800135e:	4b63      	ldr	r3, [pc, #396]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xe8>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff face 	bl	800090c <HAL_GetTick>
 8001370:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff faca 	bl	800090c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	@ 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e3c0      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001386:	4b59      	ldr	r3, [pc, #356]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x110>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80ca 	beq.w	8001538 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a4:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013ae:	4b4f      	ldr	r3, [pc, #316]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80013b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_RCC_OscConfig+0x166>
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	2b18      	cmp	r3, #24
 80013be:	d156      	bne.n	800146e <HAL_RCC_OscConfig+0x20a>
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d151      	bne.n	800146e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ca:	4b48      	ldr	r3, [pc, #288]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x17e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e392      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013e2:	4b42      	ldr	r3, [pc, #264]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 0219 	bic.w	r2, r3, #25
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	493f      	ldr	r1, [pc, #252]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa8a 	bl	800090c <HAL_GetTick>
 80013f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fa86 	bl	800090c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e37c      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	f7ff fa83 	bl	8000924 <HAL_GetREVID>
 800141e:	4603      	mov	r3, r0
 8001420:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001424:	4293      	cmp	r3, r2
 8001426:	d817      	bhi.n	8001458 <HAL_RCC_OscConfig+0x1f4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b40      	cmp	r3, #64	@ 0x40
 800142e:	d108      	bne.n	8001442 <HAL_RCC_OscConfig+0x1de>
 8001430:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001438:	4a2c      	ldr	r2, [pc, #176]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 800143a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001440:	e07a      	b.n	8001538 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	031b      	lsls	r3, r3, #12
 8001450:	4926      	ldr	r1, [pc, #152]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001456:	e06f      	b.n	8001538 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	4921      	ldr	r1, [pc, #132]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	e064      	b.n	8001538 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d047      	beq.n	8001506 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 0219 	bic.w	r2, r3, #25
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	491a      	ldr	r1, [pc, #104]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fa40 	bl	800090c <HAL_GetTick>
 800148c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fa3c 	bl	800090c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e332      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014a2:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	f7ff fa39 	bl	8000924 <HAL_GetREVID>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d819      	bhi.n	80014f0 <HAL_RCC_OscConfig+0x28c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	2b40      	cmp	r3, #64	@ 0x40
 80014c2:	d108      	bne.n	80014d6 <HAL_RCC_OscConfig+0x272>
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80014ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d2:	6053      	str	r3, [r2, #4]
 80014d4:	e030      	b.n	8001538 <HAL_RCC_OscConfig+0x2d4>
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	031b      	lsls	r3, r3, #12
 80014e4:	4901      	ldr	r1, [pc, #4]	@ (80014ec <HAL_RCC_OscConfig+0x288>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
 80014ea:	e025      	b.n	8001538 <HAL_RCC_OscConfig+0x2d4>
 80014ec:	58024400 	.word	0x58024400
 80014f0:	4b9a      	ldr	r3, [pc, #616]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	4997      	ldr	r1, [pc, #604]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
 8001504:	e018      	b.n	8001538 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	4b95      	ldr	r3, [pc, #596]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a94      	ldr	r2, [pc, #592]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff f9fb 	bl	800090c <HAL_GetTick>
 8001516:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff f9f7 	bl	800090c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e2ed      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800152c:	4b8b      	ldr	r3, [pc, #556]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80a9 	beq.w	8001698 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001546:	4b85      	ldr	r3, [pc, #532]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800154e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001550:	4b82      	ldr	r3, [pc, #520]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d007      	beq.n	800156c <HAL_RCC_OscConfig+0x308>
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b18      	cmp	r3, #24
 8001560:	d13a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x374>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d135      	bne.n	80015d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800156c:	4b7b      	ldr	r3, [pc, #492]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_OscConfig+0x320>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b80      	cmp	r3, #128	@ 0x80
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e2c1      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001584:	f7ff f9ce 	bl	8000924 <HAL_GetREVID>
 8001588:	4603      	mov	r3, r0
 800158a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800158e:	4293      	cmp	r3, r2
 8001590:	d817      	bhi.n	80015c2 <HAL_RCC_OscConfig+0x35e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	2b20      	cmp	r3, #32
 8001598:	d108      	bne.n	80015ac <HAL_RCC_OscConfig+0x348>
 800159a:	4b70      	ldr	r3, [pc, #448]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80015a2:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015aa:	e075      	b.n	8001698 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015ac:	4b6b      	ldr	r3, [pc, #428]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	069b      	lsls	r3, r3, #26
 80015ba:	4968      	ldr	r1, [pc, #416]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015c0:	e06a      	b.n	8001698 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015c2:	4b66      	ldr	r3, [pc, #408]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	061b      	lsls	r3, r3, #24
 80015d0:	4962      	ldr	r1, [pc, #392]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015d6:	e05f      	b.n	8001698 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d042      	beq.n	8001666 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015e0:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a5d      	ldr	r2, [pc, #372]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80015e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff f98e 	bl	800090c <HAL_GetTick>
 80015f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015f4:	f7ff f98a 	bl	800090c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e280      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001606:	4b55      	ldr	r3, [pc, #340]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001612:	f7ff f987 	bl	8000924 <HAL_GetREVID>
 8001616:	4603      	mov	r3, r0
 8001618:	f241 0203 	movw	r2, #4099	@ 0x1003
 800161c:	4293      	cmp	r3, r2
 800161e:	d817      	bhi.n	8001650 <HAL_RCC_OscConfig+0x3ec>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	2b20      	cmp	r3, #32
 8001626:	d108      	bne.n	800163a <HAL_RCC_OscConfig+0x3d6>
 8001628:	4b4c      	ldr	r3, [pc, #304]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001630:	4a4a      	ldr	r2, [pc, #296]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001632:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001636:	6053      	str	r3, [r2, #4]
 8001638:	e02e      	b.n	8001698 <HAL_RCC_OscConfig+0x434>
 800163a:	4b48      	ldr	r3, [pc, #288]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	069b      	lsls	r3, r3, #26
 8001648:	4944      	ldr	r1, [pc, #272]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
 800164e:	e023      	b.n	8001698 <HAL_RCC_OscConfig+0x434>
 8001650:	4b42      	ldr	r3, [pc, #264]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	493f      	ldr	r1, [pc, #252]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
 8001664:	e018      	b.n	8001698 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001666:	4b3d      	ldr	r3, [pc, #244]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a3c      	ldr	r2, [pc, #240]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800166c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff f94b 	bl	800090c <HAL_GetTick>
 8001676:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800167a:	f7ff f947 	bl	800090c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e23d      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800168c:	4b33      	ldr	r3, [pc, #204]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d036      	beq.n	8001712 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d019      	beq.n	80016e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ac:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b0:	4a2a      	ldr	r2, [pc, #168]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff f928 	bl	800090c <HAL_GetTick>
 80016bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f924 	bl	800090c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e21a      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80016d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x45c>
 80016de:	e018      	b.n	8001712 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80016e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff f90e 	bl	800090c <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff f90a 	bl	800090c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e200      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	2b00      	cmp	r3, #0
 800171c:	d039      	beq.n	8001792 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d01c      	beq.n	8001760 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0c      	ldr	r2, [pc, #48]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800172c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001730:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001732:	f7ff f8eb 	bl	800090c <HAL_GetTick>
 8001736:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173a:	f7ff f8e7 	bl	800090c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1dd      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_RCC_OscConfig+0x4f8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x4d6>
 8001758:	e01b      	b.n	8001792 <HAL_RCC_OscConfig+0x52e>
 800175a:	bf00      	nop
 800175c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001760:	4b9b      	ldr	r3, [pc, #620]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a9a      	ldr	r2, [pc, #616]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800176a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800176c:	f7ff f8ce 	bl	800090c <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001774:	f7ff f8ca 	bl	800090c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1c0      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001786:	4b92      	ldr	r3, [pc, #584]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8081 	beq.w	80018a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017a0:	4b8c      	ldr	r3, [pc, #560]	@ (80019d4 <HAL_RCC_OscConfig+0x770>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a8b      	ldr	r2, [pc, #556]	@ (80019d4 <HAL_RCC_OscConfig+0x770>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017ac:	f7ff f8ae 	bl	800090c <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b4:	f7ff f8aa 	bl	800090c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	@ 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1a0      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017c6:	4b83      	ldr	r3, [pc, #524]	@ (80019d4 <HAL_RCC_OscConfig+0x770>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <HAL_RCC_OscConfig+0x584>
 80017da:	4b7d      	ldr	r3, [pc, #500]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017de:	4a7c      	ldr	r2, [pc, #496]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e6:	e02d      	b.n	8001844 <HAL_RCC_OscConfig+0x5e0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x5a6>
 80017f0:	4b77      	ldr	r3, [pc, #476]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f4:	4a76      	ldr	r2, [pc, #472]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fc:	4b74      	ldr	r3, [pc, #464]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001800:	4a73      	ldr	r2, [pc, #460]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	6713      	str	r3, [r2, #112]	@ 0x70
 8001808:	e01c      	b.n	8001844 <HAL_RCC_OscConfig+0x5e0>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x5c8>
 8001812:	4b6f      	ldr	r3, [pc, #444]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	4a6e      	ldr	r2, [pc, #440]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70
 800181e:	4b6c      	ldr	r3, [pc, #432]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a6b      	ldr	r2, [pc, #428]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0x5e0>
 800182c:	4b68      	ldr	r3, [pc, #416]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001830:	4a67      	ldr	r2, [pc, #412]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	@ 0x70
 8001838:	4b65      	ldr	r3, [pc, #404]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183c:	4a64      	ldr	r2, [pc, #400]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d015      	beq.n	8001878 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff f85e 	bl	800090c <HAL_GetTick>
 8001850:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff f85a 	bl	800090c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e14e      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800186a:	4b59      	ldr	r3, [pc, #356]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ee      	beq.n	8001854 <HAL_RCC_OscConfig+0x5f0>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f848 	bl	800090c <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff f844 	bl	800090c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e138      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001896:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ee      	bne.n	8001880 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 812d 	beq.w	8001b06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018ac:	4b48      	ldr	r3, [pc, #288]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018b4:	2b18      	cmp	r3, #24
 80018b6:	f000 80bd 	beq.w	8001a34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	2b02      	cmp	r3, #2
 80018c0:	f040 809e 	bne.w	8001a00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b42      	ldr	r3, [pc, #264]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a41      	ldr	r2, [pc, #260]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80018ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff f81c 	bl	800090c <HAL_GetTick>
 80018d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f818 	bl	800090c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e10e      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ea:	4b39      	ldr	r3, [pc, #228]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f6:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80018f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018fa:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <HAL_RCC_OscConfig+0x774>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	430a      	orrs	r2, r1
 800190a:	4931      	ldr	r1, [pc, #196]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800190c:	4313      	orrs	r3, r2
 800190e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	3b01      	subs	r3, #1
 8001916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191e:	3b01      	subs	r3, #1
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	b29b      	uxth	r3, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192a:	3b01      	subs	r3, #1
 800192c:	041b      	lsls	r3, r3, #16
 800192e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001938:	3b01      	subs	r3, #1
 800193a:	061b      	lsls	r3, r3, #24
 800193c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001940:	4923      	ldr	r1, [pc, #140]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001942:	4313      	orrs	r3, r2
 8001944:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001946:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	4a21      	ldr	r2, [pc, #132]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001952:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <HAL_RCC_OscConfig+0x778>)
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800195e:	00d2      	lsls	r2, r2, #3
 8001960:	491b      	ldr	r1, [pc, #108]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001962:	4313      	orrs	r3, r2
 8001964:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	f023 020c 	bic.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4917      	ldr	r1, [pc, #92]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001974:	4313      	orrs	r3, r2
 8001976:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	f023 0202 	bic.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001984:	4912      	ldr	r1, [pc, #72]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800198a:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	4a10      	ldr	r2, [pc, #64]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <HAL_RCC_OscConfig+0x76c>)
 80019c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7fe ffa1 	bl	800090c <HAL_GetTick>
 80019ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019cc:	e011      	b.n	80019f2 <HAL_RCC_OscConfig+0x78e>
 80019ce:	bf00      	nop
 80019d0:	58024400 	.word	0x58024400
 80019d4:	58024800 	.word	0x58024800
 80019d8:	fffffc0c 	.word	0xfffffc0c
 80019dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7fe ff94 	bl	800090c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e08a      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f2:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x77c>
 80019fe:	e082      	b.n	8001b06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a00:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a42      	ldr	r2, [pc, #264]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7fe ff7e 	bl	800090c <HAL_GetTick>
 8001a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7fe ff7a 	bl	800090c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e070      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a26:	4b3a      	ldr	r3, [pc, #232]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x7b0>
 8001a32:	e068      	b.n	8001b06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a34:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a3a:	4b35      	ldr	r3, [pc, #212]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d031      	beq.n	8001aac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0203 	and.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d12a      	bne.n	8001aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d122      	bne.n	8001aac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d11a      	bne.n	8001aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	0a5b      	lsrs	r3, r3, #9
 8001a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d111      	bne.n	8001aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d108      	bne.n	8001aac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	0e1b      	lsrs	r3, r3, #24
 8001a9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e02b      	b.n	8001b08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001ab0:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001aba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d01f      	beq.n	8001b06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	4a11      	ldr	r2, [pc, #68]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad2:	f7fe ff1b 	bl	800090c <HAL_GetTick>
 8001ad6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ad8:	bf00      	nop
 8001ada:	f7fe ff17 	bl	800090c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d0f9      	beq.n	8001ada <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_RCC_OscConfig+0x8b0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001af2:	00d2      	lsls	r2, r2, #3
 8001af4:	4906      	ldr	r1, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_RCC_OscConfig+0x8ac>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3730      	adds	r7, #48	@ 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	58024400 	.word	0x58024400
 8001b14:	ffff0007 	.word	0xffff0007

08001b18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e19c      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b8a      	ldr	r3, [pc, #552]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b87      	ldr	r3, [pc, #540]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 020f 	bic.w	r2, r3, #15
 8001b42:	4985      	ldr	r1, [pc, #532]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b83      	ldr	r3, [pc, #524]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e184      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d908      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b78:	4b78      	ldr	r3, [pc, #480]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4975      	ldr	r1, [pc, #468]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	4b70      	ldr	r3, [pc, #448]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d908      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	496a      	ldr	r1, [pc, #424]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	4b64      	ldr	r3, [pc, #400]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d908      	bls.n	8001be6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bd4:	4b61      	ldr	r3, [pc, #388]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	495e      	ldr	r1, [pc, #376]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d010      	beq.n	8001c14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	4b59      	ldr	r3, [pc, #356]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d908      	bls.n	8001c14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c02:	4b56      	ldr	r3, [pc, #344]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4953      	ldr	r1, [pc, #332]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b4d      	ldr	r3, [pc, #308]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d908      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b4a      	ldr	r3, [pc, #296]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f023 020f 	bic.w	r2, r3, #15
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4947      	ldr	r1, [pc, #284]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d055      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c4e:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4940      	ldr	r1, [pc, #256]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c68:	4b3c      	ldr	r3, [pc, #240]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d121      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0f6      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c80:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d115      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0ea      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c98:	4b30      	ldr	r3, [pc, #192]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0de      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d6      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb8:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f023 0207 	bic.w	r2, r3, #7
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4925      	ldr	r1, [pc, #148]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cca:	f7fe fe1f 	bl	800090c <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7fe fe1b 	bl	800090c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0be      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d1eb      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d208      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f023 020f 	bic.w	r2, r3, #15
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	490e      	ldr	r1, [pc, #56]	@ (8001d5c <HAL_RCC_ClockConfig+0x244>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d214      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 020f 	bic.w	r2, r3, #15
 8001d3e:	4906      	ldr	r1, [pc, #24]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <HAL_RCC_ClockConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e086      	b.n	8001e66 <HAL_RCC_ClockConfig+0x34e>
 8001d58:	52002000 	.word	0x52002000
 8001d5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d010      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	4b3f      	ldr	r3, [pc, #252]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d208      	bcs.n	8001d8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	4939      	ldr	r1, [pc, #228]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d208      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001daa:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	492e      	ldr	r1, [pc, #184]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d208      	bcs.n	8001dea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dd8:	4b25      	ldr	r3, [pc, #148]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4922      	ldr	r1, [pc, #136]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d010      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d208      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4917      	ldr	r1, [pc, #92]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e18:	f000 f834 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	4912      	ldr	r1, [pc, #72]	@ (8001e74 <HAL_RCC_ClockConfig+0x35c>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_RCC_ClockConfig+0x358>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <HAL_RCC_ClockConfig+0x35c>)
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_RCC_ClockConfig+0x360>)
 8001e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_RCC_ClockConfig+0x364>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_RCC_ClockConfig+0x368>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fd0c 	bl	8000878 <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	58024400 	.word	0x58024400
 8001e74:	080038c4 	.word	0x080038c4
 8001e78:	24000004 	.word	0x24000004
 8001e7c:	24000000 	.word	0x24000000
 8001e80:	24000008 	.word	0x24000008

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e8a:	4bb3      	ldr	r3, [pc, #716]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e92:	2b18      	cmp	r3, #24
 8001e94:	f200 8155 	bhi.w	8002142 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001f05 	.word	0x08001f05
 8001ea4:	08002143 	.word	0x08002143
 8001ea8:	08002143 	.word	0x08002143
 8001eac:	08002143 	.word	0x08002143
 8001eb0:	08002143 	.word	0x08002143
 8001eb4:	08002143 	.word	0x08002143
 8001eb8:	08002143 	.word	0x08002143
 8001ebc:	08002143 	.word	0x08002143
 8001ec0:	08001f2b 	.word	0x08001f2b
 8001ec4:	08002143 	.word	0x08002143
 8001ec8:	08002143 	.word	0x08002143
 8001ecc:	08002143 	.word	0x08002143
 8001ed0:	08002143 	.word	0x08002143
 8001ed4:	08002143 	.word	0x08002143
 8001ed8:	08002143 	.word	0x08002143
 8001edc:	08002143 	.word	0x08002143
 8001ee0:	08001f31 	.word	0x08001f31
 8001ee4:	08002143 	.word	0x08002143
 8001ee8:	08002143 	.word	0x08002143
 8001eec:	08002143 	.word	0x08002143
 8001ef0:	08002143 	.word	0x08002143
 8001ef4:	08002143 	.word	0x08002143
 8001ef8:	08002143 	.word	0x08002143
 8001efc:	08002143 	.word	0x08002143
 8001f00:	08001f37 	.word	0x08001f37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f04:	4b94      	ldr	r3, [pc, #592]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f10:	4b91      	ldr	r3, [pc, #580]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	4a90      	ldr	r2, [pc, #576]	@ (800215c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001f22:	e111      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f24:	4b8d      	ldr	r3, [pc, #564]	@ (800215c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f26:	61bb      	str	r3, [r7, #24]
      break;
 8001f28:	e10e      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f2c:	61bb      	str	r3, [r7, #24]
      break;
 8001f2e:	e10b      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f30:	4b8c      	ldr	r3, [pc, #560]	@ (8002164 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f32:	61bb      	str	r3, [r7, #24]
      break;
 8001f34:	e108      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f36:	4b88      	ldr	r3, [pc, #544]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f40:	4b85      	ldr	r3, [pc, #532]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f4c:	4b82      	ldr	r3, [pc, #520]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f56:	4b80      	ldr	r3, [pc, #512]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80e1 	beq.w	800213c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	f000 8083 	beq.w	8002088 <HAL_RCC_GetSysClockFreq+0x204>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	f200 80a1 	bhi.w	80020cc <HAL_RCC_GetSysClockFreq+0x248>
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0x114>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d056      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f96:	e099      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f98:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02d      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	4a6b      	ldr	r2, [pc, #428]	@ (800215c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fce:	4b62      	ldr	r3, [pc, #392]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002168 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001ffe:	e087      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800216c <HAL_RCC_GetSysClockFreq+0x2e8>
 800200e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002012:	4b51      	ldr	r3, [pc, #324]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002022:	ed97 6a02 	vldr	s12, [r7, #8]
 8002026:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800202a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800202e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002042:	e065      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002170 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002056:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002066:	ed97 6a02 	vldr	s12, [r7, #8]
 800206a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800206e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800207a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002086:	e043      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002092:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002174 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209a:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ca:	e021      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002170 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002168 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800210e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002114:	0a5b      	lsrs	r3, r3, #9
 8002116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800211a:	3301      	adds	r3, #1
 800211c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002128:	edd7 6a07 	vldr	s13, [r7, #28]
 800212c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002134:	ee17 3a90 	vmov	r3, s15
 8002138:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800213a:	e005      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
      break;
 8002140:	e002      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002144:	61bb      	str	r3, [r7, #24]
      break;
 8002146:	bf00      	nop
  }

  return sysclockfreq;
 8002148:	69bb      	ldr	r3, [r7, #24]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	58024400 	.word	0x58024400
 800215c:	03d09000 	.word	0x03d09000
 8002160:	003d0900 	.word	0x003d0900
 8002164:	017d7840 	.word	0x017d7840
 8002168:	46000000 	.word	0x46000000
 800216c:	4c742400 	.word	0x4c742400
 8002170:	4a742400 	.word	0x4a742400
 8002174:	4bbebc20 	.word	0x4bbebc20

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800217c:	b0ca      	sub	sp, #296	@ 0x128
 800217e:	af00      	add	r7, sp, #0
 8002180:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002184:	2300      	movs	r3, #0
 8002186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800218a:	2300      	movs	r3, #0
 800218c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800219c:	2500      	movs	r5, #0
 800219e:	ea54 0305 	orrs.w	r3, r4, r5
 80021a2:	d049      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80021a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80021ae:	d02f      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80021b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80021b4:	d828      	bhi.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80021b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021ba:	d01a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80021bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021c0:	d822      	bhi.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ca:	d007      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021cc:	e01c      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ce:	4bb8      	ldr	r3, [pc, #736]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	4ab7      	ldr	r2, [pc, #732]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80021da:	e01a      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80021dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021e0:	3308      	adds	r3, #8
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 f9d1 	bl	800358c <RCCEx_PLL2_Config>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80021f0:	e00f      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80021f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021f6:	3328      	adds	r3, #40	@ 0x28
 80021f8:	2102      	movs	r1, #2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fa78 	bl	80036f0 <RCCEx_PLL3_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002206:	e004      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800220e:	e000      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800221a:	4ba5      	ldr	r3, [pc, #660]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800221c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002228:	4aa1      	ldr	r2, [pc, #644]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800222a:	430b      	orrs	r3, r1
 800222c:	6513      	str	r3, [r2, #80]	@ 0x50
 800222e:	e003      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002244:	f04f 0900 	mov.w	r9, #0
 8002248:	ea58 0309 	orrs.w	r3, r8, r9
 800224c:	d047      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800224e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	2b04      	cmp	r3, #4
 8002256:	d82a      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002258:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002275 	.word	0x08002275
 8002264:	08002283 	.word	0x08002283
 8002268:	08002299 	.word	0x08002299
 800226c:	080022b7 	.word	0x080022b7
 8002270:	080022b7 	.word	0x080022b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002274:	4b8e      	ldr	r3, [pc, #568]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	4a8d      	ldr	r2, [pc, #564]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800227a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002280:	e01a      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002286:	3308      	adds	r3, #8
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f001 f97e 	bl	800358c <RCCEx_PLL2_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002296:	e00f      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800229c:	3328      	adds	r3, #40	@ 0x28
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 fa25 	bl	80036f0 <RCCEx_PLL3_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022ac:	e004      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022b4:	e000      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80022b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c0:	4b7b      	ldr	r3, [pc, #492]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c4:	f023 0107 	bic.w	r1, r3, #7
 80022c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	4a78      	ldr	r2, [pc, #480]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80022d4:	e003      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80022de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80022ea:	f04f 0b00 	mov.w	fp, #0
 80022ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80022f2:	d04c      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80022f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022fe:	d030      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002304:	d829      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002306:	2bc0      	cmp	r3, #192	@ 0xc0
 8002308:	d02d      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800230a:	2bc0      	cmp	r3, #192	@ 0xc0
 800230c:	d825      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800230e:	2b80      	cmp	r3, #128	@ 0x80
 8002310:	d018      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002312:	2b80      	cmp	r3, #128	@ 0x80
 8002314:	d821      	bhi.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800231a:	2b40      	cmp	r3, #64	@ 0x40
 800231c:	d007      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800231e:	e01c      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002320:	4b63      	ldr	r3, [pc, #396]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002324:	4a62      	ldr	r2, [pc, #392]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800232a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800232c:	e01c      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800232e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002332:	3308      	adds	r3, #8
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f001 f928 	bl	800358c <RCCEx_PLL2_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002342:	e011      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002348:	3328      	adds	r3, #40	@ 0x28
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f001 f9cf 	bl	80036f0 <RCCEx_PLL3_Config>
 8002352:	4603      	mov	r3, r0
 8002354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002358:	e006      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002360:	e002      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002362:	bf00      	nop
 8002364:	e000      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002370:	4b4f      	ldr	r3, [pc, #316]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002374:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	4a4c      	ldr	r2, [pc, #304]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002380:	430b      	orrs	r3, r1
 8002382:	6513      	str	r3, [r2, #80]	@ 0x50
 8002384:	e003      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800238a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800238e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800239a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80023a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80023a8:	460b      	mov	r3, r1
 80023aa:	4313      	orrs	r3, r2
 80023ac:	d053      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80023ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ba:	d035      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80023bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c0:	d82e      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80023c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80023c6:	d031      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80023c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80023cc:	d828      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80023ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d2:	d01a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80023d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d8:	d822      	bhi.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80023de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023e2:	d007      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80023e4:	e01c      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e6:	4b32      	ldr	r3, [pc, #200]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023f2:	e01c      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023f8:	3308      	adds	r3, #8
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 f8c5 	bl	800358c <RCCEx_PLL2_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002408:	e011      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800240a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800240e:	3328      	adds	r3, #40	@ 0x28
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f001 f96c 	bl	80036f0 <RCCEx_PLL3_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800241e:	e006      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002426:	e002      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002428:	bf00      	nop
 800242a:	e000      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800242c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800242e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10b      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002436:	4b1e      	ldr	r3, [pc, #120]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800243e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002446:	4a1a      	ldr	r2, [pc, #104]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002448:	430b      	orrs	r3, r1
 800244a:	6593      	str	r3, [r2, #88]	@ 0x58
 800244c:	e003      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002462:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800246c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002470:	460b      	mov	r3, r1
 8002472:	4313      	orrs	r3, r2
 8002474:	d056      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800247a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800247e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002482:	d038      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002488:	d831      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800248a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800248e:	d034      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002490:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002494:	d82b      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002496:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800249a:	d01d      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800249c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024a0:	d825      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80024a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80024ac:	e01f      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80024ae:	bf00      	nop
 80024b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024b4:	4ba2      	ldr	r3, [pc, #648]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	4aa1      	ldr	r2, [pc, #644]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024c0:	e01c      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024c6:	3308      	adds	r3, #8
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 f85e 	bl	800358c <RCCEx_PLL2_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80024d6:	e011      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024dc:	3328      	adds	r3, #40	@ 0x28
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f001 f905 	bl	80036f0 <RCCEx_PLL3_Config>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024ec:	e006      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024f4:	e002      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80024fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10b      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002504:	4b8e      	ldr	r3, [pc, #568]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800250c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002510:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002514:	4a8a      	ldr	r2, [pc, #552]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002516:	430b      	orrs	r3, r1
 8002518:	6593      	str	r3, [r2, #88]	@ 0x58
 800251a:	e003      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800253a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800253e:	460b      	mov	r3, r1
 8002540:	4313      	orrs	r3, r2
 8002542:	d03a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	2b30      	cmp	r3, #48	@ 0x30
 800254c:	d01f      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800254e:	2b30      	cmp	r3, #48	@ 0x30
 8002550:	d819      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002552:	2b20      	cmp	r3, #32
 8002554:	d00c      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002556:	2b20      	cmp	r3, #32
 8002558:	d815      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d019      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800255e:	2b10      	cmp	r3, #16
 8002560:	d111      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002562:	4b77      	ldr	r3, [pc, #476]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	4a76      	ldr	r2, [pc, #472]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800256c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800256e:	e011      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002574:	3308      	adds	r3, #8
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f001 f807 	bl	800358c <RCCEx_PLL2_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002584:	e006      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800258c:	e002      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800259c:	4b68      	ldr	r3, [pc, #416]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80025a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025aa:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025ac:	430b      	orrs	r3, r1
 80025ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b0:	e003      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80025c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80025d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4313      	orrs	r3, r2
 80025d8:	d051      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80025da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025e4:	d035      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80025e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025ea:	d82e      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80025ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025f0:	d031      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80025f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025f6:	d828      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025fc:	d01a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002602:	d822      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260c:	d007      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800260e:	e01c      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002610:	4b4b      	ldr	r3, [pc, #300]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	4a4a      	ldr	r2, [pc, #296]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800261c:	e01c      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800261e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002622:	3308      	adds	r3, #8
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f000 ffb0 	bl	800358c <RCCEx_PLL2_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002632:	e011      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002638:	3328      	adds	r3, #40	@ 0x28
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f857 	bl	80036f0 <RCCEx_PLL3_Config>
 8002642:	4603      	mov	r3, r0
 8002644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002648:	e006      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002650:	e002      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002660:	4b37      	ldr	r3, [pc, #220]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002664:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800266c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266e:	4a34      	ldr	r2, [pc, #208]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002670:	430b      	orrs	r3, r1
 8002672:	6513      	str	r3, [r2, #80]	@ 0x50
 8002674:	e003      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800267a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800267e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800268a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002694:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002698:	460b      	mov	r3, r1
 800269a:	4313      	orrs	r3, r2
 800269c:	d056      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800269e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a8:	d033      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80026aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ae:	d82c      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80026b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026b4:	d02f      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80026b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026ba:	d826      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80026bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026c0:	d02b      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80026c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026c6:	d820      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80026c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026cc:	d012      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80026ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026d2:	d81a      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d022      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80026d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026dc:	d115      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e2:	3308      	adds	r3, #8
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 ff50 	bl	800358c <RCCEx_PLL2_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026f2:	e015      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f8:	3328      	adds	r3, #40	@ 0x28
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fff7 	bl	80036f0 <RCCEx_PLL3_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002708:	e00a      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002710:	e006      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002712:	bf00      	nop
 8002714:	e004      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002716:	bf00      	nop
 8002718:	e002      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800271a:	bf00      	nop
 800271c:	e000      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800271e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800272a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002736:	4a02      	ldr	r2, [pc, #8]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002738:	430b      	orrs	r3, r1
 800273a:	6513      	str	r3, [r2, #80]	@ 0x50
 800273c:	e006      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800273e:	bf00      	nop
 8002740:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002762:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002766:	460b      	mov	r3, r1
 8002768:	4313      	orrs	r3, r2
 800276a:	d055      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002778:	d033      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800277a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800277e:	d82c      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002784:	d02f      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800278a:	d826      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800278c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002790:	d02b      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002796:	d820      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800279c:	d012      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800279e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a2:	d81a      	bhi.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d022      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80027a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027ac:	d115      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027b2:	3308      	adds	r3, #8
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fee8 	bl	800358c <RCCEx_PLL2_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80027c2:	e015      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80027c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c8:	3328      	adds	r3, #40	@ 0x28
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 ff8f 	bl	80036f0 <RCCEx_PLL3_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80027d8:	e00a      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80027f8:	4ba3      	ldr	r3, [pc, #652]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002808:	4a9f      	ldr	r2, [pc, #636]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800280a:	430b      	orrs	r3, r1
 800280c:	6593      	str	r3, [r2, #88]	@ 0x58
 800280e:	e003      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800282e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002832:	460b      	mov	r3, r1
 8002834:	4313      	orrs	r3, r2
 8002836:	d037      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002842:	d00e      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002848:	d816      	bhi.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d018      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800284e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002852:	d111      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4b8c      	ldr	r3, [pc, #560]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	4a8b      	ldr	r2, [pc, #556]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002860:	e00f      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002866:	3308      	adds	r3, #8
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fe8e 	bl	800358c <RCCEx_PLL2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002876:	e004      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800288a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800288c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	4a7b      	ldr	r2, [pc, #492]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800289a:	430b      	orrs	r3, r1
 800289c:	6513      	str	r3, [r2, #80]	@ 0x50
 800289e:	e003      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80028b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80028be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4313      	orrs	r3, r2
 80028c6:	d039      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80028c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d81c      	bhi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80028d2:	a201      	add	r2, pc, #4	@ (adr r2, 80028d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	08002915 	.word	0x08002915
 80028dc:	080028e9 	.word	0x080028e9
 80028e0:	080028f7 	.word	0x080028f7
 80028e4:	08002915 	.word	0x08002915
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e8:	4b67      	ldr	r3, [pc, #412]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	4a66      	ldr	r2, [pc, #408]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028f4:	e00f      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fa:	3308      	adds	r3, #8
 80028fc:	2102      	movs	r1, #2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fe44 	bl	800358c <RCCEx_PLL2_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800290a:	e004      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002912:	e000      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800291e:	4b5a      	ldr	r3, [pc, #360]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	f023 0103 	bic.w	r1, r3, #3
 8002926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292c:	4a56      	ldr	r2, [pc, #344]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800292e:	430b      	orrs	r3, r1
 8002930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002932:	e003      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002952:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002956:	460b      	mov	r3, r1
 8002958:	4313      	orrs	r3, r2
 800295a:	f000 809f 	beq.w	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a4a      	ldr	r2, [pc, #296]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002968:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800296a:	f7fd ffcf 	bl	800090c <HAL_GetTick>
 800296e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002972:	e00b      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fd ffca 	bl	800090c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	@ 0x64
 8002982:	d903      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800298a:	e005      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800298c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ed      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800299c:	2b00      	cmp	r3, #0
 800299e:	d179      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029a0:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80029ac:	4053      	eors	r3, r2
 80029ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d015      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b6:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c2:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	4a30      	ldr	r2, [pc, #192]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029da:	4a2b      	ldr	r2, [pc, #172]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80029ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ee:	d118      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fd ff8c 	bl	800090c <HAL_GetTick>
 80029f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f8:	e00d      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fd ff87 	bl	800090c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a04:	1ad2      	subs	r2, r2, r3
 8002a06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d903      	bls.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002a14:	e005      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a16:	4b1c      	ldr	r3, [pc, #112]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0eb      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d129      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a3a:	d10e      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002a3c:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a4c:	091a      	lsrs	r2, r3, #4
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6113      	str	r3, [r2, #16]
 8002a58:	e005      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a64:	6113      	str	r3, [r2, #16]
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7c:	e00e      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002a86:	e009      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58024800 	.word	0x58024800
 8002a90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f002 0301 	and.w	r3, r2, #1
 8002aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ab2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f000 8089 	beq.w	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac4:	2b28      	cmp	r3, #40	@ 0x28
 8002ac6:	d86b      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ba9 	.word	0x08002ba9
 8002ad4:	08002ba1 	.word	0x08002ba1
 8002ad8:	08002ba1 	.word	0x08002ba1
 8002adc:	08002ba1 	.word	0x08002ba1
 8002ae0:	08002ba1 	.word	0x08002ba1
 8002ae4:	08002ba1 	.word	0x08002ba1
 8002ae8:	08002ba1 	.word	0x08002ba1
 8002aec:	08002ba1 	.word	0x08002ba1
 8002af0:	08002b75 	.word	0x08002b75
 8002af4:	08002ba1 	.word	0x08002ba1
 8002af8:	08002ba1 	.word	0x08002ba1
 8002afc:	08002ba1 	.word	0x08002ba1
 8002b00:	08002ba1 	.word	0x08002ba1
 8002b04:	08002ba1 	.word	0x08002ba1
 8002b08:	08002ba1 	.word	0x08002ba1
 8002b0c:	08002ba1 	.word	0x08002ba1
 8002b10:	08002b8b 	.word	0x08002b8b
 8002b14:	08002ba1 	.word	0x08002ba1
 8002b18:	08002ba1 	.word	0x08002ba1
 8002b1c:	08002ba1 	.word	0x08002ba1
 8002b20:	08002ba1 	.word	0x08002ba1
 8002b24:	08002ba1 	.word	0x08002ba1
 8002b28:	08002ba1 	.word	0x08002ba1
 8002b2c:	08002ba1 	.word	0x08002ba1
 8002b30:	08002ba9 	.word	0x08002ba9
 8002b34:	08002ba1 	.word	0x08002ba1
 8002b38:	08002ba1 	.word	0x08002ba1
 8002b3c:	08002ba1 	.word	0x08002ba1
 8002b40:	08002ba1 	.word	0x08002ba1
 8002b44:	08002ba1 	.word	0x08002ba1
 8002b48:	08002ba1 	.word	0x08002ba1
 8002b4c:	08002ba1 	.word	0x08002ba1
 8002b50:	08002ba9 	.word	0x08002ba9
 8002b54:	08002ba1 	.word	0x08002ba1
 8002b58:	08002ba1 	.word	0x08002ba1
 8002b5c:	08002ba1 	.word	0x08002ba1
 8002b60:	08002ba1 	.word	0x08002ba1
 8002b64:	08002ba1 	.word	0x08002ba1
 8002b68:	08002ba1 	.word	0x08002ba1
 8002b6c:	08002ba1 	.word	0x08002ba1
 8002b70:	08002ba9 	.word	0x08002ba9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b78:	3308      	adds	r3, #8
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fd05 	bl	800358c <RCCEx_PLL2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b88:	e00f      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8e:	3328      	adds	r3, #40	@ 0x28
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fdac 	bl	80036f0 <RCCEx_PLL3_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b9e:	e004      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ba6:	e000      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002bb2:	4bbf      	ldr	r3, [pc, #764]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bc0:	4abb      	ldr	r2, [pc, #748]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8002bc6:	e003      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f002 0302 	and.w	r3, r2, #2
 8002bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002be6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002bea:	460b      	mov	r3, r1
 8002bec:	4313      	orrs	r3, r2
 8002bee:	d041      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d824      	bhi.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c4d 	.word	0x08002c4d
 8002c04:	08002c19 	.word	0x08002c19
 8002c08:	08002c2f 	.word	0x08002c2f
 8002c0c:	08002c4d 	.word	0x08002c4d
 8002c10:	08002c4d 	.word	0x08002c4d
 8002c14:	08002c4d 	.word	0x08002c4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fcb3 	bl	800358c <RCCEx_PLL2_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c2c:	e00f      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c32:	3328      	adds	r3, #40	@ 0x28
 8002c34:	2101      	movs	r1, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fd5a 	bl	80036f0 <RCCEx_PLL3_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c42:	e004      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c56:	4b96      	ldr	r3, [pc, #600]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	f023 0107 	bic.w	r1, r3, #7
 8002c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c64:	4a92      	ldr	r2, [pc, #584]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c66:	430b      	orrs	r3, r1
 8002c68:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c6a:	e003      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f002 0304 	and.w	r3, r2, #4
 8002c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4313      	orrs	r3, r2
 8002c92:	d044      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d825      	bhi.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca6:	bf00      	nop
 8002ca8:	08002cf5 	.word	0x08002cf5
 8002cac:	08002cc1 	.word	0x08002cc1
 8002cb0:	08002cd7 	.word	0x08002cd7
 8002cb4:	08002cf5 	.word	0x08002cf5
 8002cb8:	08002cf5 	.word	0x08002cf5
 8002cbc:	08002cf5 	.word	0x08002cf5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fc5f 	bl	800358c <RCCEx_PLL2_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cd4:	e00f      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cda:	3328      	adds	r3, #40	@ 0x28
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fd06 	bl	80036f0 <RCCEx_PLL3_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cea:	e004      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	f023 0107 	bic.w	r1, r3, #7
 8002d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0e:	4a68      	ldr	r2, [pc, #416]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f002 0320 	and.w	r3, r2, #32
 8002d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	d055      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d4a:	d033      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d50:	d82c      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d56:	d02f      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d826      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d62:	d02b      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002d64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d68:	d820      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d6e:	d012      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002d70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d74:	d81a      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d022      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002d7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d7e:	d115      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d84:	3308      	adds	r3, #8
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fbff 	bl	800358c <RCCEx_PLL2_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d94:	e015      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9a:	3328      	adds	r3, #40	@ 0x28
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fca6 	bl	80036f0 <RCCEx_PLL3_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db2:	e006      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002db4:	bf00      	nop
 8002db6:	e004      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002db8:	bf00      	nop
 8002dba:	e002      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dca:	4b39      	ldr	r3, [pc, #228]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	4a35      	ldr	r2, [pc, #212]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6553      	str	r3, [r2, #84]	@ 0x54
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002e00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4313      	orrs	r3, r2
 8002e08:	d058      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e12:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e16:	d033      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002e18:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e1c:	d82c      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e22:	d02f      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e28:	d826      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e2e:	d02b      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002e30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e34:	d820      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e3a:	d012      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e40:	d81a      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d022      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4a:	d115      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e50:	3308      	adds	r3, #8
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fb99 	bl	800358c <RCCEx_PLL2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e60:	e015      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e66:	3328      	adds	r3, #40	@ 0x28
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fc40 	bl	80036f0 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e76:	e00a      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e7e:	e006      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e80:	bf00      	nop
 8002e82:	e004      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e84:	bf00      	nop
 8002e86:	e002      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10e      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ea6:	4a02      	ldr	r2, [pc, #8]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eac:	e006      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002eae:	bf00      	nop
 8002eb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ed2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	d055      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002ee4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002ee8:	d033      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002eea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002eee:	d82c      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef4:	d02f      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002ef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002efa:	d826      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002efc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002f00:	d02b      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002f02:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002f06:	d820      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002f08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f0c:	d012      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002f0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f12:	d81a      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d022      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f1c:	d115      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f22:	3308      	adds	r3, #8
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fb30 	bl	800358c <RCCEx_PLL2_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f32:	e015      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f38:	3328      	adds	r3, #40	@ 0x28
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fbd7 	bl	80036f0 <RCCEx_PLL3_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f48:	e00a      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f50:	e006      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f52:	bf00      	nop
 8002f54:	e004      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f68:	4ba1      	ldr	r3, [pc, #644]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002f78:	4a9d      	ldr	r2, [pc, #628]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f7e:	e003      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f002 0308 	and.w	r3, r2, #8
 8002f94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	d01e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fba:	3328      	adds	r3, #40	@ 0x28
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fb96 	bl	80036f0 <RCCEx_PLL3_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fd0:	4b87      	ldr	r3, [pc, #540]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe0:	4a83      	ldr	r2, [pc, #524]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f002 0310 	and.w	r3, r2, #16
 8002ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ffc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003000:	460b      	mov	r3, r1
 8003002:	4313      	orrs	r3, r2
 8003004:	d01e      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800300e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003012:	d10c      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003018:	3328      	adds	r3, #40	@ 0x28
 800301a:	2102      	movs	r1, #2
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fb67 	bl	80036f0 <RCCEx_PLL3_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800302e:	4b70      	ldr	r3, [pc, #448]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800303e:	4a6c      	ldr	r2, [pc, #432]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003040:	430b      	orrs	r3, r1
 8003042:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800305a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800305e:	460b      	mov	r3, r1
 8003060:	4313      	orrs	r3, r2
 8003062:	d03e      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800306c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003070:	d022      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003076:	d81b      	bhi.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003080:	d00b      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003082:	e015      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003088:	3308      	adds	r3, #8
 800308a:	2100      	movs	r1, #0
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fa7d 	bl	800358c <RCCEx_PLL2_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003098:	e00f      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309e:	3328      	adds	r3, #40	@ 0x28
 80030a0:	2102      	movs	r1, #2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fb24 	bl	80036f0 <RCCEx_PLL3_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80030b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c2:	4b4b      	ldr	r3, [pc, #300]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030d2:	4a47      	ldr	r2, [pc, #284]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80030ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030f0:	2300      	movs	r3, #0
 80030f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80030f8:	460b      	mov	r3, r1
 80030fa:	4313      	orrs	r3, r2
 80030fc:	d03b      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800310a:	d01f      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800310c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003110:	d818      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003116:	d003      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003118:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800311c:	d007      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800311e:	e011      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003120:	4b33      	ldr	r3, [pc, #204]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	4a32      	ldr	r2, [pc, #200]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800312a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800312c:	e00f      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800312e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003132:	3328      	adds	r3, #40	@ 0x28
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fada 	bl	80036f0 <RCCEx_PLL3_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003142:	e004      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800314c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003156:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003166:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003168:	430b      	orrs	r3, r1
 800316a:	6553      	str	r3, [r2, #84]	@ 0x54
 800316c:	e003      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003182:	673b      	str	r3, [r7, #112]	@ 0x70
 8003184:	2300      	movs	r3, #0
 8003186:	677b      	str	r3, [r7, #116]	@ 0x74
 8003188:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800318c:	460b      	mov	r3, r1
 800318e:	4313      	orrs	r3, r2
 8003190:	d034      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d007      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80031a2:	e011      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	4a11      	ldr	r2, [pc, #68]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031b0:	e00e      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b6:	3308      	adds	r3, #8
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f9e6 	bl	800358c <RCCEx_PLL2_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031c6:	e003      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e6:	4a02      	ldr	r2, [pc, #8]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031e8:	430b      	orrs	r3, r1
 80031ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80031ee:	bf00      	nop
 80031f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800320a:	2300      	movs	r3, #0
 800320c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800320e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003212:	460b      	mov	r3, r1
 8003214:	4313      	orrs	r3, r2
 8003216:	d00c      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321c:	3328      	adds	r3, #40	@ 0x28
 800321e:	2102      	movs	r1, #2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fa65 	bl	80036f0 <RCCEx_PLL3_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800323e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003240:	2300      	movs	r3, #0
 8003242:	667b      	str	r3, [r7, #100]	@ 0x64
 8003244:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003248:	460b      	mov	r3, r1
 800324a:	4313      	orrs	r3, r2
 800324c:	d038      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800325a:	d018      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800325c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003260:	d811      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003266:	d014      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800326c:	d80b      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d011      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003276:	d106      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003278:	4bc3      	ldr	r3, [pc, #780]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	4ac2      	ldr	r2, [pc, #776]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800327e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003284:	e008      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800328c:	e004      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032a0:	4bb9      	ldr	r3, [pc, #740]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032b0:	4ab5      	ldr	r2, [pc, #724]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032b2:	430b      	orrs	r3, r1
 80032b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80032b6:	e003      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80032cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032ce:	2300      	movs	r3, #0
 80032d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80032d6:	460b      	mov	r3, r1
 80032d8:	4313      	orrs	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032dc:	4baa      	ldr	r3, [pc, #680]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	4aa7      	ldr	r2, [pc, #668]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80032fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80032fe:	2300      	movs	r3, #0
 8003300:	657b      	str	r3, [r7, #84]	@ 0x54
 8003302:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003306:	460b      	mov	r3, r1
 8003308:	4313      	orrs	r3, r2
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800330c:	4b9e      	ldr	r3, [pc, #632]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003318:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800331c:	4a9a      	ldr	r2, [pc, #616]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800331e:	430b      	orrs	r3, r1
 8003320:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800332e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003330:	2300      	movs	r3, #0
 8003332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003334:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d009      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800333e:	4b92      	ldr	r3, [pc, #584]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003342:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800334c:	4a8e      	ldr	r2, [pc, #568]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800334e:	430b      	orrs	r3, r1
 8003350:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800335e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003360:	2300      	movs	r3, #0
 8003362:	647b      	str	r3, [r7, #68]	@ 0x44
 8003364:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003368:	460b      	mov	r3, r1
 800336a:	4313      	orrs	r3, r2
 800336c:	d00e      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800336e:	4b86      	ldr	r3, [pc, #536]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	4a85      	ldr	r2, [pc, #532]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003374:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003378:	6113      	str	r3, [r2, #16]
 800337a:	4b83      	ldr	r3, [pc, #524]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800337c:	6919      	ldr	r1, [r3, #16]
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003386:	4a80      	ldr	r2, [pc, #512]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003388:	430b      	orrs	r3, r1
 800338a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800338c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800339a:	2300      	movs	r3, #0
 800339c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800339e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80033a2:	460b      	mov	r3, r1
 80033a4:	4313      	orrs	r3, r2
 80033a6:	d009      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033a8:	4b77      	ldr	r3, [pc, #476]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b6:	4a74      	ldr	r2, [pc, #464]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80033c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80033d2:	460b      	mov	r3, r1
 80033d4:	4313      	orrs	r3, r2
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033e8:	4a67      	ldr	r2, [pc, #412]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033ea:	430b      	orrs	r3, r1
 80033ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80033ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	2100      	movs	r1, #0
 80033f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003400:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003404:	460b      	mov	r3, r1
 8003406:	4313      	orrs	r3, r2
 8003408:	d011      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340e:	3308      	adds	r3, #8
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f8ba 	bl	800358c <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800341e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	2100      	movs	r1, #0
 8003438:	6239      	str	r1, [r7, #32]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003440:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003444:	460b      	mov	r3, r1
 8003446:	4313      	orrs	r3, r2
 8003448:	d011      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	3308      	adds	r3, #8
 8003450:	2101      	movs	r1, #1
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f89a 	bl	800358c <RCCEx_PLL2_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800345e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	2100      	movs	r1, #0
 8003478:	61b9      	str	r1, [r7, #24]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003484:	460b      	mov	r3, r1
 8003486:	4313      	orrs	r3, r2
 8003488:	d011      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348e:	3308      	adds	r3, #8
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f87a 	bl	800358c <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800349e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	2100      	movs	r1, #0
 80034b8:	6139      	str	r1, [r7, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034c4:	460b      	mov	r3, r1
 80034c6:	4313      	orrs	r3, r2
 80034c8:	d011      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	3328      	adds	r3, #40	@ 0x28
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f90c 	bl	80036f0 <RCCEx_PLL3_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80034de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	2100      	movs	r1, #0
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d011      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	2101      	movs	r1, #1
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f8ec 	bl	80036f0 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800351e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	2100      	movs	r1, #0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d011      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	3328      	adds	r3, #40	@ 0x28
 8003550:	2102      	movs	r1, #2
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f8cc 	bl	80036f0 <RCCEx_PLL3_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800355e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800356e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003582:	46bd      	mov	sp, r7
 8003584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003588:	58024400 	.word	0x58024400

0800358c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800359a:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d101      	bne.n	80035aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e099      	b.n	80036de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80035aa:	4b4f      	ldr	r3, [pc, #316]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a4e      	ldr	r2, [pc, #312]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80035b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b6:	f7fd f9a9 	bl	800090c <HAL_GetTick>
 80035ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035be:	f7fd f9a5 	bl	800090c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e086      	b.n	80036de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035d0:	4b45      	ldr	r3, [pc, #276]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035dc:	4b42      	ldr	r3, [pc, #264]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	493f      	ldr	r1, [pc, #252]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	3b01      	subs	r3, #1
 8003600:	025b      	lsls	r3, r3, #9
 8003602:	b29b      	uxth	r3, r3
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	3b01      	subs	r3, #1
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	3b01      	subs	r3, #1
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003620:	4931      	ldr	r1, [pc, #196]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003622:	4313      	orrs	r3, r2
 8003624:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003626:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	492d      	ldr	r1, [pc, #180]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003638:	4b2b      	ldr	r3, [pc, #172]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	f023 0220 	bic.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4928      	ldr	r1, [pc, #160]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800364a:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	4a26      	ldr	r2, [pc, #152]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003650:	f023 0310 	bic.w	r3, r3, #16
 8003654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003656:	4b24      	ldr	r3, [pc, #144]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800365a:	4b24      	ldr	r3, [pc, #144]	@ (80036ec <RCCEx_PLL2_Config+0x160>)
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	69d2      	ldr	r2, [r2, #28]
 8003662:	00d2      	lsls	r2, r2, #3
 8003664:	4920      	ldr	r1, [pc, #128]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003666:	4313      	orrs	r3, r2
 8003668:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800366a:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003670:	f043 0310 	orr.w	r3, r3, #16
 8003674:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800367c:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003682:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003686:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003688:	e00f      	b.n	80036aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003690:	4b15      	ldr	r3, [pc, #84]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800369a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800369c:	e005      	b.n	80036aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800369e:	4b12      	ldr	r3, [pc, #72]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	4a11      	ldr	r2, [pc, #68]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80036a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80036aa:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80036b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b6:	f7fd f929 	bl	800090c <HAL_GetTick>
 80036ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036bc:	e008      	b.n	80036d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036be:	f7fd f925 	bl	800090c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e006      	b.n	80036de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <RCCEx_PLL2_Config+0x15c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	58024400 	.word	0x58024400
 80036ec:	ffff0007 	.word	0xffff0007

080036f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036fe:	4b53      	ldr	r3, [pc, #332]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d101      	bne.n	800370e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e099      	b.n	8003842 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800370e:	4b4f      	ldr	r3, [pc, #316]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a4e      	ldr	r2, [pc, #312]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371a:	f7fd f8f7 	bl	800090c <HAL_GetTick>
 800371e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003720:	e008      	b.n	8003734 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003722:	f7fd f8f3 	bl	800090c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e086      	b.n	8003842 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003734:	4b45      	ldr	r3, [pc, #276]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003740:	4b42      	ldr	r3, [pc, #264]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	051b      	lsls	r3, r3, #20
 800374e:	493f      	ldr	r1, [pc, #252]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	628b      	str	r3, [r1, #40]	@ 0x28
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	3b01      	subs	r3, #1
 800375a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	3b01      	subs	r3, #1
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	b29b      	uxth	r3, r3
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	3b01      	subs	r3, #1
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	3b01      	subs	r3, #1
 800377e:	061b      	lsls	r3, r3, #24
 8003780:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003784:	4931      	ldr	r1, [pc, #196]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800378a:	4b30      	ldr	r3, [pc, #192]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	492d      	ldr	r1, [pc, #180]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800379c:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4928      	ldr	r1, [pc, #160]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80037ae:	4b27      	ldr	r3, [pc, #156]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	4a26      	ldr	r2, [pc, #152]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037be:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <RCCEx_PLL3_Config+0x160>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	69d2      	ldr	r2, [r2, #28]
 80037c6:	00d2      	lsls	r2, r2, #3
 80037c8:	4920      	ldr	r1, [pc, #128]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	4a1e      	ldr	r2, [pc, #120]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80037ec:	e00f      	b.n	800380e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d106      	bne.n	8003802 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037f4:	4b15      	ldr	r3, [pc, #84]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	4a14      	ldr	r2, [pc, #80]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 80037fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003800:	e005      	b.n	800380e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	4a11      	ldr	r2, [pc, #68]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003808:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800380c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800380e:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a0e      	ldr	r2, [pc, #56]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381a:	f7fd f877 	bl	800090c <HAL_GetTick>
 800381e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003820:	e008      	b.n	8003834 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003822:	f7fd f873 	bl	800090c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e006      	b.n	8003842 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <RCCEx_PLL3_Config+0x15c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	58024400 	.word	0x58024400
 8003850:	ffff0007 	.word	0xffff0007

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <__libc_init_array>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	4d0d      	ldr	r5, [pc, #52]	@ (800389c <__libc_init_array+0x38>)
 8003868:	4c0d      	ldr	r4, [pc, #52]	@ (80038a0 <__libc_init_array+0x3c>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	2600      	movs	r6, #0
 8003870:	42a6      	cmp	r6, r4
 8003872:	d109      	bne.n	8003888 <__libc_init_array+0x24>
 8003874:	4d0b      	ldr	r5, [pc, #44]	@ (80038a4 <__libc_init_array+0x40>)
 8003876:	4c0c      	ldr	r4, [pc, #48]	@ (80038a8 <__libc_init_array+0x44>)
 8003878:	f000 f818 	bl	80038ac <_init>
 800387c:	1b64      	subs	r4, r4, r5
 800387e:	10a4      	asrs	r4, r4, #2
 8003880:	2600      	movs	r6, #0
 8003882:	42a6      	cmp	r6, r4
 8003884:	d105      	bne.n	8003892 <__libc_init_array+0x2e>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	f855 3b04 	ldr.w	r3, [r5], #4
 800388c:	4798      	blx	r3
 800388e:	3601      	adds	r6, #1
 8003890:	e7ee      	b.n	8003870 <__libc_init_array+0xc>
 8003892:	f855 3b04 	ldr.w	r3, [r5], #4
 8003896:	4798      	blx	r3
 8003898:	3601      	adds	r6, #1
 800389a:	e7f2      	b.n	8003882 <__libc_init_array+0x1e>
 800389c:	080038d4 	.word	0x080038d4
 80038a0:	080038d4 	.word	0x080038d4
 80038a4:	080038d4 	.word	0x080038d4
 80038a8:	080038d8 	.word	0x080038d8

080038ac <_init>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr

080038b8 <_fini>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	bf00      	nop
 80038bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038be:	bc08      	pop	{r3}
 80038c0:	469e      	mov	lr, r3
 80038c2:	4770      	bx	lr
